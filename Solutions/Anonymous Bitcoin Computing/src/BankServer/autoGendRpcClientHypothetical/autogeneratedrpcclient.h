#ifndef AUTOGENERATEDRPCCLIENT_H
#define AUTOGENERATEDRPCCLIENT_H

#include <QObject>

//I guess it would be wide to decide lol sppner lul drucks
//i guess it would be wise to decide oh fuck what was i talking about
//it would be wise to decide how much functionality i want the first rpc prototypte to have
//i think the auto-object-caching is out of the question... though research and documentation/comments should be littered throughout the source as i stumble upon scenarios that would relate to it, because it is something i would definitely want to put in a future revision
//the target goal for me right now is just a methods-that-use-built-in-Qt-Object-parameters defined interface (so parameters are string/literal-specified) and a hardcoded server that implements said interface (it will always be hardcoded. it is the "business logic"). i will also have a [also-hardcoded, but wouldn't be in the prototype] AutoGendRpcClientsHelper, which uses string replacing mechanisms for the defined interface values. (method signatures are parsed in as xml structure). for now, our brain will be the parser. i should still copy/paste the hardcoded (but would be auto-generated in a prototype) Interface pure virtual class that is generated from the parsing of the interface xml data. the rpc server / always-typed-by-user "business logic" of the RPC (which i HOPE to use/abstract more to use object caching in the future (BUT NOT NOW)) Connection (Client/Server relationship. this is the bank itself performing modifications. it responds using the interface it implements to handle messages. err need to think that out more.
class AutoGeneratedRpcClient : public QObject
{
    Q_OBJECT
public:
    explicit AutoGeneratedRpcClient(QObject *parent = 0);

signals:

public slots:

};

#endif // AUTOGENERATEDRPCCLIENT_H
