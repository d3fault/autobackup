The design for this is very similar to Abc2WithdrawalRequestProcessor (which I just got done (the non-error case) writing a few days ago), in that I'll be querying a view to get the work to do. I thought about making transaction crediting instant and part of the normal "buy ad slot" (and pessimistic recovery), but there are just too many damn error cases and implications (locking two accounts, what if one fails?) and it just sounds like a headache. My sane entry point then becomes the transaction documents, which I'm going to give a "state". There will also be a new lock type for the user account ("creditting a transaction", probably pointing to the transaction for fail/resume abilities).

I am leaning towards implementing it like the pessimistic monitor/recoverer with the "select self at random" and "back off if detecting a neighbor (that is myself) doing the work" -- just to make it horizontally scalable. Withdrawal request processor could also become like that, BUT that's dangerous since there are bitcoind communications taking place (and I'm going to be watching withdrawal request processor run for a while I'd imagine, until I'm confident it can run on it's own).
For now I'm just going to implement it the normal non-error use case, which is more or less identical with withdrawal request processing (I thought about just letting campaign specify a payout key and then blam we just send the amount directly, but then I can't take my 3% cut).

TODOoptional: this, withdrawal request processor, and pessimistic monitor/recoverer could all become one (the timings for them stay indepdnent), it would simply make more efficient use of couchbase connections.