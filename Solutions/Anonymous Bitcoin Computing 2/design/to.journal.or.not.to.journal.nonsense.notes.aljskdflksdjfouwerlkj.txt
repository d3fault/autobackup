I keep flip flopping on whether or not I need journaling. I cringe at the thought. "I realized my problem could be easily solved with a custom journaling filesystem. Now I have 1001 problems". My slot journaling mechanism is bomb-diggity, but I'm still having trouble translating it into a generic/abstract journaler. I'm also hesitant to even devote my thoughts towards it (could be another tangent that will sidetrack me by 2+ fucking years (and I had another thought about Rpc: I believe I could spend the rest of my days alive tweaking/modifying/enhancing/upgrading rpc)).

It doesn't make sense for me to have such a robust slot purchasing mechanism and to let the other components of Abc2 fault and make the system fucked (for lack of a better word).

Registration, I now plan to split into two steps... or rather, two keys/docs. "UserCredentials" and "UserBalance". Since user registration is now not an atomic operation, journaling and recovery etc comes to mind.

HOWEVER I'm keen on using event-driven recovery instead of full on journaling (especially since I can't wrap my head around full journaling yet). For example, I could make the "UserCredentials" (pwhash/salt) the LCB_ADD to consider whether or not a user is registered, and then the "UserBalance" doc would be able to not exist (although we'd still create it on registration, we'd do LCB_ADD-accepting-fail (whereas UserCredentials is LCB_ADD-failing-on-fail (and not continuing on to UserBalance creation))).
On login, now, we would pull for the UserBalance doc if pwhash/salt pass our checks (or async get em both but guh fuck that [for now TODOoptimization]) out. If it doesn't exist (Registration partial failure), we LCB_ADD-accepting-fail it. Obviously the balance is set to 0.0 during all this, but that brings me to a much more difficult and important point: couchbase node failure. I... errr.. uhm... I need to learn how it fails and how to react to it programmatically (and to use that auto-failover checkbox). Since I'm using durability, [something]. Kinda forgetting what I wanted to say here but TODOreq figure it out

Back to what I know: login already will be needing to GET the UserBalance doc in order to go into slot-purchase-attempted-but-failed-just-after-locking-recovery-mode (slot is not filled, only user account locked). It is a dangerous recovery and we either wait for the slot to get filled by NOT us (in which case we unlock), slot to get filled (in which case we don't do shit (someone else will unlock)), or we can alternatively proceed ahead with the buy/slot-fill BUT ONLY FOR THE ONE WE ARE LOCKED TO.

We can/should combine the registration-finish (UserBalance CREATE) with the login->account-locked-wat-do-recovery(^), since they both involve the same doc.

Basically everything is boiling down to "if the glove fits..", err wait no wrong speech: "if the 'fail' would be noticed by and/or affects the public (all the users of the system), we'd use that 'pessimistic monitor and recoverer' type method. But for user-specific fails, we can drive the recovery process whenever the user tries to do something (such as login (but there are other times where this applies that I'm going to get to in a minute, such as bitcoin add funds key stuff and the creating of slot fillers stuff ('allSlotFillers' doc may need event-driven recovery, for example)).
I feel like the code I'm writing is delicate and dangerous. I see vulnerabilities (change-password just after buy-step-2 clicked (actually come to think of it we can just refuse to change password if account is locked xD TODOreq)) and then account for them.. but worry that I'm not seeing some. But I tell myself to trust myself and to eh just proceed with caution (either that or I shoot myself in the face).

I'm just having a hard time summoning up what kind of recovery mechanism "slot fillers" and "bitcoin funds adding" (the only two steps (aside from mass cleanup and recovery and sanitization and (????)) left *GASP*) can/will/should have.

Bitcoin, too, has a lot of flexibility in how I hack it in. Too much flexibility and I'm all liek "where put :(?" and I'm like "hmm bolt it onto front-end?" vs. "hmm it's own thread?" vs. "hmm if it's own thread, it has own channel to backend or communicates only with front-end" vs. "lives on backend hackily?"....... oh and of course trying to remember that I want it to scale horizontally xD. Maybe having front-end communicate to it on another comp via the ssl-rpc-json (built-in *phew*) API.... BUT then how do recovery? How scale horizontally? Guh flexible as fuck xD, the problem of too many options. I mean sharding the keys themselves comes to mind, but eh I can't control the generation of it (actually yes i can! pre-gen, shard-via-app, import to certain nodes accordingly). I'd store the "sharding data" (what IPs own what) as a couchbase key, queried maybe once a day. Idk maybe I'm getting ahead of myself with bitcoin thinkin and need to focus on registration/login recovery first (before I forget).

I've since opening this doc flip flopped on whether or not I want to do two docs for registration. I'm unsure if one doc is safe.

Regardless, login recovery (user account locked only) is something I should probably tackle before I forget how (the same rationale I used to decide to tackle pessimistic-monitor-recoverer / get-and-subscribe when i did).