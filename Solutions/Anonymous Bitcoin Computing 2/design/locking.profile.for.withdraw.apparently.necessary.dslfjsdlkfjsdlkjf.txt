Possibly wrong, see second paragraph: When doing a withdraw of funds, I only need to check the regular "lockedAttemptingToFill" field isn't set (just like when doing add funds). There is no conflict of add vs. withdraw funds (I initially suspected there might be), so long as withdraw funds uses cas-swap just as add funds already does (the cas swap itself is the protection for the add vs. withdraw). HOWEVER, if the cas-swap FAILS, I need to redo it.

Oh shit I need to lock the account to make "slot filler purchasing" ineligible when a withdraw request is being processed, otherwise there is a race condition where the user can purchase a slot filler AFTER i have "actually sent them the bitcoins" but BEFORE I've deducted the withdraw amount from their balance. I need to put the profile in "locked-withdrawing" mode (and need to make sure I don't do a slot fill purchase when in that mode -- add funds is fine because they won't be disappearing the funds that are being withdrawn. only actions that reduce the balance need to be checked against), perhaps pointing at the withdraw request currently being processed (but actually that will be "in memory" in the withdraw processing app, so probably isn't needed (but would be if the processor crashed (but we can still get back to the withdraw request using the view query ofc))).

"Slot Attempting to Fill" and "Withdraw in Process" both need to lock the profile before proceeding (but check FOR EACH OTHER before locking ofc). "Add Funds" need only check that the lock on the profile is not "slot attempting to fill" -- add funds CAN proceed with the "withdraw in process" lock (but maybe to be safe (from? this is just paranoia most likely) I shouldn't allow it).


I'm considering genericizing the "locked" json key and have it's json value be the "resume type and resume point" (parceable, separated by colon, or other (compound value). for examples "locked":"attemptingToFillSlot:1" and "locked":"withdrawingFunds:ehMaybeWithdrawRequestIndexButMaybeNoResumePointForThisResumeType"), just to simplify future checks for profile "locked" state.