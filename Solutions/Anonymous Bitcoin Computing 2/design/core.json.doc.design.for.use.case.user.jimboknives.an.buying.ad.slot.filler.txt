d3fault is selling adspace, and this is his "0th" ad selling campaign. It is confusing at first, but the below key/doc is accessible at: abc.com/ads/buy-ad-space/d3fault/0 . The user is buying the ad space being sold, so that's what they type-in/see

//AD SPACE BEING SOLD CAMPAIGN -- regular up and running full doc (alternates/variations below)
adSpaceSlotsd3fault0
{
  "minPrice": "0.001",
  "slotLengthHours": "24",
  "lastSlotFilledAkaPurchased": {
    "slotIndex": "4",
    "purchaseTimestamp": "1972",
    "startTimestamp": "1975",
    "purchasePrice": "0.005872"
  }
}

All that is needed to calculate the current price && dropping-rate is minPrice, slotLengthHours, lastSlotFilledAkaPurchased, and of course the current time.

The initial/minimum state of adSpaceSlotsd3fault0 is that only minPrice and slotLengthHours fields exist.

The full json document for adSpaceSlotsd3fault0 before any purchases at all follows:

adSpaceSlotsd3fault0
{
  "minPrice": "0.001",
  "slotLengthHours": "24"
}

The full json document for adSpaceSlotsd3fault0Slot1 follows:

/A SLOT PURCHASE OF AN AD SPACE BEING SOLD
adSpaceSlotsd3fault0Slot1 //these are the keys/docs that are CAS-raced to (LCB_ADD)
{
  "purchaseTimestamp": "1970",
  "startTimestamp" : "1971",
  "purchasePrice": "0.002",
  "slotFilledWith": "adSpaceSlotFillersJimboKnives0"	
}

adSpaceSlotFillersJimboKnives0 must be set up already by user JimboKnives. Once set up, it cannot be changed (they can/have-to make new ones)

The full json document for adSpaceSlotFillersJimboKnives0 follows:

//A SLOT FILLER WHICH IS USED TO PURCHASE AD SPACE
adSpaceSlotFillersJimboKnives0
{
  "username" : "JimboKnives",
  "nickname" : "Fucken Knives n Shit",
  "hoverText": "You Know You Wanna Shank Someone!",
  "url": "http://buy-my-kniveries.com",
  "adImageB64": "sdlfkjvirus.binsdofuljkeworu"
}

the reason the doc has "username" so we can get to the 'profile' view below (can't parse up to that zero). it is also used in recovery possy mode when the transaction doc does not exist (need the username to begin doing user account recovery steps)

adSpaceSlotFillersJimboKnives should then list all of JimboKnives' ad campaigns (regardless of whether or not they have been used)

The full json document for adSpaceSlotFillersJimboKnives follows:

--NOPE--: despite being more efficient, using ONLY 'all' slot fillers doc below is much simpler...
//A 'PROFILE' VIEW FOR A USER WHO BUYS AD SPACE (and their associated slot fillers)
adSpaceSlotFillersJimboKnives
{
  "adsCount": "2",
  "lastTenAds": [
    {
      "nickname": "Widgets For Sale Ad Campaign",
      "slotFillerIndex": "0"
    },
    {
      "nickname": "Unused For Now",
      "slotFillerIndex": "1"
    }    
  ]
}

^if adsCount is > 10, they get linked to a "view" which shows all of them (it's assumed that the ads would show up in the view before 10 can be made). JimboKnives sees the nickname (which I suppose must be unique then) when selecting it as a slot filler for adSpaceSlotsd3fault0Slot1. When JimboKnives is logged in and clicks "buy" on abc.com/ads/buy-ad-space/d3fault/0 , we then load an expensive doc containing all of his ads: adSpaceAllSlotFillersJimboKnives

The full json document for adSpaceAllSlotFillersJimboKnives follows:

//ALL OF A USER'S POTENTIAL ADS FOR USE IN BUYING AD SPACE (only JimboKnives can get this doc when clicking "buy" on abc.com/ads/buy-ad-space/d3fault/0. Also perhaps if he is logged in and goes to "ALL". Non logged in users go to view, JimboKnives gets the expensive doc)
adSpaceAllSlotFillersJimboKnives
{
  "adsCount": "2",
  "0" : "Widgets For Sale Ad Campaign",
  "1" : "Unused For Now"
}

^basically same as profile view, but the doc could get pretty big (TODOreq: ensure not > 'store' wt2couchbase message size minus header size(lolol)) -- TODOoptimization: page'ination (guh)

//CRITICAL SESSION/ACCOUNT DATA FOR JimboKnives -- has ability to buy slot fillers
userJimboKnives
{
  "balance": "0.098",
  "passwordHash": "MRGFtZyvcZU/2HdEW1H57bVtwfrPfw==",
  "passwordSalt": "1964Y1AFICvu1XiQE9w0xsPhDE8=",
  "bitcoinState": "NoKey", //or "GettingKey" or "HaveKey"
  [optional]"bitcoinStateData" : "not set when NoKey. if(bitcoinKeyState == GettingKey) { which bitcoinKeySet[setN] we're getting from } else if(bitcoinKeyState == HaveKey) { the bitcoin key itself }"
  [optional]"bitcoinSetPage" : "PageY", //only appears when "GettingKey"
  [optional]"bitcoinGetKeyUUID" : "per-key-request-uuid" //only appears when "GettingKey"
}

##
So before we allow JimboKnives to LCB_ADD adSpaceSlotsd3fault0Slot1, we first have to make sure he has enough funds. We also have to make sure he doesn't try to buy two things simultaneously (and doesn't have enough funds for both), so we have to 'lock' his userJimboKnives document by doing a CAS swap (if he tries to do two buys simultaneously, the second one will fail) and putting it into the following state while it is 'locked'

!!!!!!!!TODOreq: we need to use ptree::erase to take off slotToAttemptToFillAkaPurchase stuff instead of re-making the ptree and copying values over. This applies to recovery possy code too!!! Otherwise BitcoinState stuff might be lost (and keys (POSSIBLY FUNDS ALREADY SENT TO IT) lost with it)!!!!!!!!!!!!!

//CRITICAL SESSION/ACCOUNT DATA FOR JimboKnives -- buy abilities CAS-swap 'LOCKED' until transaction succeeds or fails (TODOreq: rollback/machine-failures)
userJimboKnives
{
  "passwordHash": "MRGFtZyvcZU/2HdEW1H57bVtwfrPfw==",
  "passwordSalt": "1964Y1AFICvu1XiQE9w0xsPhDE8=",
  "balance": "0.098",
  "slotToAttemptToFillAkaPurchase": "adSpaceSlotsd3fault0Slot1",
  "slotToAttemptToFillAkaPurchaseItWith" : "adSpaceSlotFillersJimboKnives0"
}

^priceToAttemptToBuyItFor is what the server side has calculated to be the current price after the user clicked "buy at current price" (clicking it gave us the slot # and the 'price they were seeing', but we disregard the 'price they were seeing' once we verify that currentPrice is less than or equal to 'price they were seeing'

^^priceToAttemptToBuyItFor must be >= balance otherwise we don't even do the CAS-swap lock (and definitely not the LCB_ADD of adSpaceSlotsd3fault0Slot1 of course)

##
if any of those 3 fields (slotTo, priceTo, slotTo) are seen, we know the account is locked. On login, we can also check whether or not adSpaceSlotsd3fault0Slot1 is-taken/filled/exists. If it isn't taken, we can 'recover' from a crashed server and proceed with trying to fill/purchase it. If it's taken by someone else, we unlock JimboKnives account without deducting priceToAttemptToBuyItFor from his balance. If on login we see adSpaceSlotsd3fault0Slot1 is taken by JimboKnives, then we've recovered from a crash-just-after-LCB_ADD, and we know that priceToAttemptToBuyItFor needs to still be deducted from his balance.
##
Then (whether 'recovering' or functioning as normal at this point), we CAS-swap 'UNLOCK' the account, deducting priceToAttemptToBuyItFor from the balance as we do. If the CAS-swap fails, we pull the key again and expect to see the "slotTo, priceTo, slotTo" gone... which means we thought we recovered from a fail, but actually another machine is still driving the transaction (maybe it's http front end just went down). 

NOPE: 
{

If the CAS-swap fails and the "slotTo,priceTo,slotTo" is still there, the entire system is fucked and we should emit an error and possibly shut everything down because wtf it should not (ALTHOUGH, maybe 'another' machine has finished the transaction and *gasp* started another one!?!?!? My brain just exploded)

}

##
If the CAS-swap fails and the "slotTo,priceTo,slotTo" is still there and the "slotToAttemptToFillAkaPurchase" is still the same it was before we attempted to CAS-swap-unlock it (adSpaceSlotsd3fault0Slot1), THEN shit is fucked and the entire system is fucked etc (like 'NOPE').
##
If however the CAS-swap fails and the "slotTo,priceTo,slotTo" is still there and the slotToAttemptToFillAkaPurchase is DIFFERENT, we know that they're logged in elsewhere and that that instance has already done the CAS-swap we are attempting to do (and it has ADDITIONALLY started another 'attempt to buy [something else]')


TODOreq: I think I want/need to split up the user's balance from the rest of their shit (pw/salt), BECAUSE: if they tried to do "change password" right the fuck after pressing buy step 2 (automated to increase chances of doing the race condition), they could change the CAS of the user account and then their account would... err... well it would still be in locked mode so we could probably recover from it just fine, BUT for KISS etc i think i should separate balance into it's own thing. I should have a simple "locked" : true/false thing with the balance doc and i should MAYBE lock it during 'get add funds key' -> pending payment (btcn) -> then unlock it on confirmed payment (btcn)... but unsure about that for now...


Transaction documents have something to do with atomocity of user-account-unlocking that I can't exactly put into words right now, but I trust my earlier fucking spaced out version of myself last night with saying that they fix dat one race condition I wrote about or something. It also seems to make shit more organized so fuck it. The transaction document for a given slot fill must be made before the user-account is unlocked. The transaction document is found using the slot being filled's name. Transaction documents are made by either the main driver, or the recovery possy. It doesn't matter who makes it, so the LCB_ADD failing is accepted.

txd3fault0Slot1 // corresponding to adSpaceSlotsd3fault0Slot1 of course
{
	"buyer" : "JimboKnives",
	"seller" : "d3fault",
	"amount" : "0.002"
	//timestamp? probably no, KISS
}

//user "d3fault" is hardcoded and doesn't even need to exist (but should be there for future proofing) -- we'll have a semi-hardcoded routine that then dumps this "user"'s balance into offline bitcoin wallet. In our first version, we can poll a couchbase-view that just gets all the transactions and dumps that amount into offline bitcoin keys. Actually fuck that shit, we should move them into offline bitcoin keys as soon as they become 'bitcoin-confirmed' (for safety, even though we still use the couchbase-view just described to determine how much of it is mine/spendable (although really kind of a gray area since I am not planning on coding refunds yet, I could likely spend all of it xD (but I won't) so long as the users' balance reflected how much they put in ya know?)).

adSpaceSlotsd3fault0currentSlotCache
{
	currentSlotIndex: "3"
}

//SlotCache is just a shortcut/symbolic-link esq type doc. If it doesn't exist we can jump using math to what is about the right spot, or just walk the slots until we find one not existing. I may put the "slotFiller" in this cache as well, and possibly even "expiration" date... but for now KISS and just declaring it here to get it out of the campaign doc

Not Locked:
bitcoinKeySet[setN]_CurrentPage //setN = rand() % 1000
{
  "currentPage" : "PageY"
}

Locked:
bitcoinKeySet[setN]_CurrentPage
{
  "fillingNextBitcoinKeySetPage" : "1", //indicates the NEXT page attemptint to be filled
  "uuidPerFill" : "UUID-per-fill",
  "hugeBitcoinKeyListStartingPage" : "PageZ"
}

bitcoinKeySet[setN]_PageY //example: bitcoinKeySet998_Page3
{
 "key0": "aaaabbbbbcccc69",

  //...100 of such entries...

 "key99": "zzzzzzdddddd3333",
 "key99claimedUuid": "per-key-get-uuid", //get_optional, not existing if key unclaimed
 "key99claimedUsername": "JimboKnives" //get_optional
}

hugeBitcoinKeyList_CurrentPage //no other state, can point to non-existent page (as optimization to give us simple lcbOp-fail-gets instead of huge doc gets/analyzings/THEN-fails)
{
  "currentPage" : "69"
}

hugeBitcoinKeyList_Page0 //hardcoded key range size of 100 (matching bitcoinKeySet[setN]_PageY key count)
{
  "keyRange0" : "comma separated list of bitcoin keys",

  //....100 of such entries. hardcoding to ease the coding (i suck at boost::json) for now, but theoretically doesn't need to be consistent and can change from page to page (was thinking 20mb worth, but eh maybe 350kb-ish would be more optimal?). i would just need to iterate json entries better. HOWEVER THE SIZE OF EACH ENTRY/key-range/bitcoin-key-set-page (100 keys) must stay the same

  "keyRange420" : "comma separated list of bitcoin keys",
  "keyRange420claimedUuid" : "per-set-refill-uuid", //get_optional, not existing if key range unclaimed (just like bitcoinKeySet[setN]_PageY)
  "keyRange420claimedSetN" : "setN for book keeping" //get_optional
              claimedSetNPageY??? is just book keeping anyways, idfk
}