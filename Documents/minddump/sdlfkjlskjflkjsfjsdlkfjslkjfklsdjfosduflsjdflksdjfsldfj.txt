I want a compiler hack that uses (and perhaps has custom file format for) inlined static singleMonolithicBinaryMostlyInlined. Such compiler flags already exist, but it would be a hack because I want to store the implementation of the inlined code in the source file, not the header (header still declares it, but only as regular method (compiler hack swoops in and just knows to inline-jit (it could be only used in static mode, or shared but that might run into problems and I genuinely don't know. All I know is I use #defines instead of inlines because I don't want the copyright for whatever to be transferred to the header (I don't mind sharing the header, but I don't want my implementations to live in there. I'm pretty sure that "where it lives in the serialized file" is where it legally lives in the copyright sense. Compiled-with-said-hack versions would be non-redistrutable because there would not be a linker separation between the copyleft'd code and the hypothetical proprietary user of that code. lgpl is worthless to them if they can't redistribute the code under their own terms (compiling proprietary-using-lgpl-lib in static mode makes it unredistributable))))). I basically just want a precompiler that takes a method marked "inline" in the source and puts it in the header before regular compile. Or I'd even settle for the opposite (but it'd be dangerous to code): inline functions moved to source just before save (and reverted at load). Blah maybe -O3 -static is all I want wtf am I rambling about?