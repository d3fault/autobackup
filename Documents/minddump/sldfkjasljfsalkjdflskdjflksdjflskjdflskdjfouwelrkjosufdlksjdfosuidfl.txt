So I learned how to sign bitcoin transactions from the offline machine! I don't need to use the "importprivkey" or "open wallet.dat file for one outgoing transaction (sending rest of output back to offline key)", both of which are flawed if online machine is already compromised (semi-fightable by only dealing with small amounts at a time). I also read on some xiph.org/people/~greg/ page (same that demo'd the offline signing) about multisig usage. Sounds awfully familiar to something I described just a few docs back ;-P....
...except it's not.

Multisig is really best suited to escrow: the money becomes unusable unless both parties agree on where it gets sent (refund or pay out). The "sender"/buyer has an advantage over the "receiver"/seller in the escrow case though because he can always just withold payment to be a dick after services have already been rendered. He can't get the money back, but he can keep the buyer from using it still.... and seeing as the entire market is floating... it SLIGHTLY benefits the "sender"/buyer because it's essentially like those funds go out of existence. Both of their OTHER balances now become worth slightly more (equally proportionately so), and the "sender"/buyer got free service.

I'm digressing: I'm liking my idea of sharing half of my passwords to my funds with friends as a means of drunk proofing. I'm liking the idea of staggering/replicating amongst friends in case a friend dies in some accident.

The purpose of this document is to address "if you drunkenly say your password, a scheme to detect which friend was untrustworthy and spent your bitcoins that he had the other half to". It isn't too complicated (tl;dr:sharding), but I didn't mention it before and just thought it up :). But that's just it: sharding. Do I go on to explain what that means for noobies or do I make them look it up and stop writing? I guess since I'm not doing anything else really I'll explain it in further detail.

Sharding: If you have 100 keys then you RANDOMLY (the randomness must be "guaranteed random" and "evenly distributed"... which are somewhat hard to achieve but at the end of the day amounts to a fucking sha-256 of the bitcoin address :-P. easy if you know what you're doing). So you shard out your keys to your friends and you keep track of them (an app could do this for you -- doing it manually would give you a headache and is not advisable) privately/securely. You could keep an ENCRYPTED copy of the "shard map" with each of your friends, right alongside their "shard subset"... because it's always nice to have backups. You make sure that each bitcoin address goes to at least "N" (3) of your friends and that the same key doesn't get sharded to the same friend twice (possible, easily fixed) -- also done automatically with an app.

The result and/or what it gains you: If you drunkenly release your password (OH SHIT THEN THEY HAVE ACCESS TO THE SHARDING MAP-------

ok if you store the sharding map somewhere else rofl (entire idea now sucks): when you drunkely release your password, a friend spending just one of your addresses you can narrow it down to 3 of your friends... and since they are randomly/evenly distributed you can USUALLY pinpoint down to 1 which friend is fucking you over when the 2nd key is used. The amount of keys they use dramatically increases their chance of you figuring out who they are (and then you don't include them in yer circle).


You could encrypt the sharding map using a DIFFERENT friend's key-half than the friend whose "drive" you're storing it on: so that if you drunkenly release your own password, they'd only have access to the subset of keys sharded to them and detection of spending becomes easy), except that the first person you give "encrypted shards" to won't be able to store a "shard map using A DIFFERENT friend's key-half", simply because you haven't "gotten" any other friend's key-halves yet. But that problem can be solved by doubling back to your first friend at the end and giving your first friend the key-half that your last friend "gave" you (but not give... just "used" to "generate a 2-key encrypted shard map" (i mean sure it could be "give" easily... but then why even use the security mechanism to begin with (oh right, to steal THEIR money LoLoLoL))). It might also require that the shard map (and therefore friend map (and therefore key map(???)) is entirely pre-generated before beginning giving out shard subsets and shard maps... but I'm not too sure of this and I think an "upgrade" (new bitcoin addresses) plan could also be devised. Even if not, it's cheap/trivial to generate thousands/millions of addresses automatically.

This is semi-flawed if you use one "donation" public key that racks in a lot of money. The temptation to spend all of that 1 public key might be too high and they might deem it worth the risk since you can only narrow it down to 3. A solution to that, however, is to periodically split/spend to tons of your other keys. It's still generally unadvised to use a single "donation" address to begin with lol so fuck it.


Upon drunkenly spewing your password, you only need to meet up with one of your friends in a timely manner. Wait no what kind of crack am I smoking? You need to meet up with 1/N (1/3) of your friends to send all of your drunkenly-leaked-to-friends addresses to new addresses with a new memorized password. Sounds like a fucking pain in the ass... but at least you could alleviate the stress of "OMFG IF I ACCIDENTALLY SAY THIS PASSWORD OUT LOUD ALL MY MONEY IS FUCKING GONE" -- which I'm already starting to feel and I haven't even finished memorizing my damn password (solo/not-using-described-security, for now).

Multisig does not buy you that because you can't have "or" keys (you can only have 1 friend "sharing" a key at a time). Or shit I don't understand that scriptSig shit at all [yet?]..... MAYBE YOU CAN have "'mine and this1' or 'mine and this2' or 'mine and this3'"!?!?!? Still, if you could then it would give you the same security/problems. Hmm actually I think if you did it in scriptSig then maybe the transaction log would show you exactly which friend fucked you over!?!?!?!? Hahaha if so that method would be way better (but I'm not too sure about it (or even if 'or'-ing is possible (time to go read/learn-scriptSig because it's grabbed my interest)))