I thought changing to enums was supposed to solve my function parameter changing/mismatch problems, but the fucking things convert to bools and ints and even each other seemlessly. What did that buy me again? Fffff. There was some hacky solution to this that I bookmarked but never actually tried... I think it even disabled low level implicit conversion between like chars/ints too... and then I was leik "if I wrote a tool to do this (insert it just before compilation), how do I identify the line between user code and system code (where system code is still allowed to do the implicit conversion, else I'll be plagued with mountains of problems that aren't mine). And do 3rd party libraries count as system libraries!?!? C/C++ sucks sometimes (but really, most languages convert strings to ints and all kinds of dumb bullshit). AHAH the solution is to not use enums at all but to instead use OBJECTS. It's overkill, but unless derived from the same object there is no implicit conversion. At this point it's just laziness of actually creating objects when all i want is a "bool x = true" in my fucking method parameter, which brings me back to designEquals of course and blah blah blah...