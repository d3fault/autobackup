damn wasted so much fucking time on that message speed testing
so, since they are roughly the same at the very least (d ptr allocates on heap)
AND since i can _CONTROL_ heap + manual recycling (signals is easiest imo)

i'm going to do heap threaded recycling. it also has benefit of being synchronous without needing to change any code when on the same thread. the Actions, for example. The business logic has the right to do whatever it wants with the "messageDispenser" that the Rpc Interface it implments (and therefore the "clienthelper" / rpc server that is auto generated for me). messageDispenser has subtypes Actions and Broadcasts, which have auto generated sub-types that ARE the messageGenerators (recyclers). an example one would be: createBankAccountMessageGenerator, which gives you (the message itself): createBankAccountMessage. these are backed by / using pointers to a central (can be protocol'd (can it be protocol'd based on types that use it as a central backbone? is it allowed to "know of" them? since it is autogenerated code i don't see why not. an rpc server only ever talks to his respective rpc client anyways)) network. For a broadcast, there is no network message backing it. Or perhaps there is but it is broadcast one? Fuck need a thinker.