Think of a boost::shared_ptr like a boost::scoped_ptr. If you don't 'release' ('release' is the scoped_ptr term, but 'copy' is the shared_ptr term) it before the scope ends, it gets deleted. UNLIKE scoped_ptr, you can 'release' ('copy') it MULTIPLE times, _AND_ as a huge fucking bonus you can even give each release/copy to DIFFERENT FUCKING THREADS (as long as each thread _ONLY_ reads the pointed to object). When each and every thread is done reading their 'copy', the object is destroyed. So it's like scoped_ptr, but instead of simply local SCOPE, you're dealing with MULTIPLE THREADS OF EXECUTION BEING 'INTERESTED IN' (for reading only) AN OBJECT.