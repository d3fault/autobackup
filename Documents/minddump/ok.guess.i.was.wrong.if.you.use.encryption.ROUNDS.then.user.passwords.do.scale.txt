well i stand corrected

the whole "encrypt shit 100x" with user-password does scale

as the CPUs get faster, you just up the count


in my d3fault example, i'm going to be storing a master password (also file list?) file on the server itself

to ease my thinking, think of it as a .kdb file

we will upload a couple hundred .kdb files, and each one will use 100 "rounds" of encryption

brute forcing now has to happen on each of the couple hundred and the rounds

splitting it between files is really the same thing as the "rounds"
but it's easier for me to think about

and it MIGHT serve another purpose (decoy or something? not sure about this)

but in any case: i'm retarded

which is GREAT NEWS (hah, i sound like house now because i'm excited that i'm retarded)

i can secure bitcoin keys woot
i should definitely use adequate "rounds"

i wouldn't mind my master key taking upwards of a few minutes... even with the right key... to gain access

but i guess that's what i meant by splitting it
it should only take that long when pulling from the network
once you get all 100 .kdb files on your offline raspberry pi, you can/should/will disregard the 99 that you don't need. or maybe not disregard them, but remember which 1x is the one you want

but that means that an adversary will have an easy(ish) time cracking it if they do figure out which "one" is the right one

this is different from "rounds" which have to be done every time
i don't want the "minutes" method to happen every time... just when pulling from a public repository (the d3fault dht itself)

it is moderate security nonetheless

perhaps... keep all 100 on hdd but remember which "one" is the right one (but don't keep the key in memory in any case) in the memory... so every reboot of the offline raspi has to do the "minutes" again.

you're being mugged/etc, all you have to do is power down and bam your 100 kdb files security (each with "rounds" (actually just one, the others are decoy random data (or perhaps genuine password files, but full of not-used passwords idgaf about)))


a lock screen to keep them from examining the computer itself and you have decent security (until the lock screen is brute forced (which can be detected and can make the device shut down :-P) or the memory is sniffed (there is no way to prevent this except maybe to weld the device in a metal case? even then, not that secure))

in the memory sniffing case all they'd be able to figure out is which "one" is the right one, which will speed up their brute forcing 100 fold (100 is 1000 or even a million, idfk. but need to find the right balance between .kdb files and encryption "rounds". both need to be adequate, but rounds on the actual is really more important.. because it'd be the only security left after which "one" is figured out)

another way of maintaining it intsead of in-memory is by a simple integer number

after you get the 100 kdb files from the network, you scramble the order they are in locally, then brute force (really just regular unlock) with your key, figure out "the one"... then memorize it. if you clear your 100 copies and re-get them from network, it will be a different "one". so if someone sees you type in which "one", you can still regain all your security by simply deleting and re-downloading/scrambling the 100 files

that number is basically the same thing i was thinking about keeping in memory

it could be a combination of both techniques
in fact i do like that idea

download all 100 from d3fault dht
all 100 are stored in a scrambled order on hdd
the "one" is figured out and told to you
it is also stored in memory until next reboot (this is to evade the "screen watcher" watching you and figuring out the one)
upon reboot, you can use your motherfucking brain to say which one is the "one" so you don't have to wait minutes etc


on a shit raspi the minutes could be hours

it needs to scale hella

i mean holy shit

my theory is still........ somewhat right.

raspi would need a really really really really long time with it's shit 300 (700? guess not?) mhz processing speed

i'd need to think about super computers and how they're going to scale with quantum computers (damn i'm starting to convince myself that even these preventative measures won't work)


they scale
but only after the fact
once you upload your 100, you're fucked. eventually.

when you scale up, your old 100 are still there, and somewhere buried in them is your shit
you could overwrite/scramble them, but it's a public repository so that won't do shit

say quantum computers make you up the kdb file count to 1000 and the rounds to 1000 as well
only shit encrypted with the new key hidden within the 1000 files + 1000 rounds is safe (for the time being)

it's like 'living in the now' but always [or something]

everybody just scales up for whenever the fuck they're born.

i could even have a calculator that uses moore's law to calculate for you how many decoys/rounds you should use
that idea is awesome

because someone in the year 3000 could still use the software

instead of moore's law + year input, we could just let them calculate it based on ghz input
keeping in mind ghz will probably not even be that much by then (already isn't in supercomputers)

btw you definitely need to use 64 bit ints for anything relevant. 32-bit isn't enough... IPv4 is a good example of that

hahahaha

people will LoL so hard looking back reading this
"holy shit that guy's fucking old. he was around when IP addresses were 32-bits"
(at least i think that's what IPv4 is... too lazy to check)

i wonder when the 64-bit domain will run out

it's a fucking shit ton more than double. 33 bits is double 32 bits
god i love computers

that's my only hope for secure password'ing
math
really
is all it is
you idiot
why are you even typing this
it isn't that interesting
you're just rambling/spewing now


do you want to use passwords or not?
yes. yes i do.

because how the FUCK am i going to use bitcoin without them?