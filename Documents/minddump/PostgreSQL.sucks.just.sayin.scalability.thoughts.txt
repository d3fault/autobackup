PostgreSQL's WOL functionality is retarded
it basically just says "write twice. if the second write fails, write it with the first write (after verifying the first right?)". retarded. the request forwarder, on a different machine... or the request originator, it matters not... keeps the request active/pending and can dispatch a new one if the server goes down and loses the first message. if they both go down we are already fucked. how could i even recover from that? i guess neighbor failover'ing. but partition'd data would be fucked. unless i dht it, which i should. dht solves scalability problems for the data layer server, request holding/re-dispatching by the [also-scaled] 3rd level cache solves the occassional node failure (but does not account for when the requestor/data-servers both fail at the same time. maybe the HAproxy thingo pings the wt front-ends (and appdb pings something respectively) to see if they're still up and if not redirects future requests elsewhere). wt front end in this case (for appdb data layer), or appdb itself (for bank server data layer).