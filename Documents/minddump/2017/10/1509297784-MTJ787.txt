To create is to change nothing into something.

To "create" (symbol for 'add') is to change (symbol for 'mutate') nothing (symbol for (non-existing key OR empty string)) into something (symbol for non-empty string).

I should rename (had:rewrite) the variables of StupidKeyValueContentTracker accordingly, for readability!

QString value = get(key);
if(!value.isNothing())
{
}

hmmm...

Energy *e = new Nothing();
//there also exists class Something, which also inherits from Energy

Human::convertNothingIntoSomething(&e);

void Human::convertNothingIntoSomething(Energy **e);
{
	Energy *ret = new Something();
	convert(*e, ret); //never fails! all art attempts are still art
	delete (*e);
	(*e) = ret;
}


hmm can you have a unique_ptr<unique_ptr<Energy>> ? probably!

if I'm going for "readability" as I say, then the above convertNothingIntoSomething method is wrong because Energy cannot be added or removed from the universe! Ziiing!

//QSet<Matter> Universe;
class Universe : public QSet<Energy>
{
	//what are we doing when we create? we are shifting around existing matter so that it is sculpted into reality. "it" is kinda undefined in previous sentence, so let's try again: we are shifting around existing matter so that information is sculpted into reality. should I s/information/art ? is all information art? arguably, yes. also arguably no. my kneejerk instinct is to say that yes all information is art (that doesn't mean some "artistic business methods" aren't able to harm humanity as a whole!). but does that mean that Nothingness, which comprises of Energy and therefore Information, is art? fuck no. it is a logical contradiction. the Nothingness in this case could be expanded to the more verbose NotArt or possibly even NotEnergy(idk about this, didn't the design just get fucked?). Ok so ya Nothingness's not NotEnergy, but it is NotArt. Nothingness is still energy though... just in an uninteresting shape waiting for you to sculpt it. A can of paint not yet opened. An empty directory. An empty shell prompt. An empty Cli or Widgets Qt/C++ project. The electronic matter that will persist your mothingfucking thoughts and code!!!
	//The word "potential" comes to mind, but I'm not sure how it applies. Nothingness is Energy which has the potential of _becoming_ Something. I don't think in C++ we can "mutate" (or "change") types like that [without a new/copyConvert/deleteOld/return-new (like in above code)]. Ehhh the delete/new shit is an implementation detail which COULD BE HIDDEN if you wanted readafuckinbility. delete does not "remove matter from existence", it simply tells my computer that I'm no longer interested in a particular segment of memory (but it tells my computer this AFTER running the destructor of that object). We will, however, be invalidating pointers, *gasp*... so unique_ptrs by default (using shared_ptrs where warranted) becomes necessary... yet those aren't the most readable things in the world so maybe we should inherit them? wait what my head hurts. Is there a way to do it without invalidating pointers? Doubt it, think of thread safety! Change+Notify pretty much has the best tradeoffs of all the candidates of the "thread safety" approaches. but Matter should change atomically! Eh not necessarily, chemical reactions take time. But [probably] deep in chemical reactions is some kind of matter that never changes, just gets rearranged in 3d space relative to some other stuff. Oh yea it's called Energy! So am I saying that since it takes time to create Art that we should not have an atomic conversion of the Nothing into Something, or at least let end-uesrs have stale copies of the "matter" which still point to nothing, until a changed signal reaches them and the Energy now points to a Something)
	void change(Nothing *in_Nothing, Something *out_Something); //was called "convert", then I re-read the first line of this doc. also the precise arg types would likely change to incorporate unique_ptrs and shared_ptrs etc
private:
	QSet<const Energy *> m_Whitespace; //uninteresting/yet-to-be-used Energy
	QSet <const Energy*> m_Art;

	//so change() merely takes some pointers out of m_Whitespace and puts them into m_Art
	//in case you haven't figured it out, the Energy objects that the pointers "live" in is 'this' object (a "class Universe : public QSet<Energy>" at the time of writing)
	//arguably, the "list of what is art vs what is whitespace" exists in an object called HumanBrain and not in class Universe. also arguably that list exists in a class called CollectiveConscience. arguably though, and how this is coded atm, that list exists in class Universe because art is SCULPTED into the motherfucking Universe!!! should I s/change/sculpt ? Actually sculpt is way more poetically enthusiastic, and I hereby s/change/sculpt the first sentence of this doc!!! Yes that's right the orig line said "change". I also s/change()/sculpt() in the code, but am going to leave it as is so you can see where I used the words "sculpt" normally (before the edit of first sentence). I hereby sculpt it back! muahaha fuckit change is both easier to understand and you don't "sculpt something into nothing" when you delete (or more precisely, mark something as deleted but keep it in your history) something.
	//I'm trying to recall, why the fuck do I want delete in StupidKeyValueContentTracker when SocialNetworkTimeline will be pretty much append-only anyways? I guess so StupidKeyValueContentTracker _lib_ has utility in other apps? "deleting and keeping in history" is only SLIGHTLY MORE CODE than "modifying and keeping previous version in history" --- in fact they are arguably the same thing hence the first line of this doc (or at least some portions of this doc :-/)!!! what is the abstract form of "changing and keeping the previous version" combined with "creating something out of nothing"/"changing nothing into something" (the rhs of the "/" is the better side)?
	
	//change but keep previous version <-- MODIFY
	//change nothing into something <-- ADD
	
	//<somethin> <-- ADD/MODIFY
	//kek could literally call it "Add_Or_Modify"
	//Mutate does not cover "change nothing into something", or does it?
	//man this is all pretty philosophical bullshit all in the name of readability, hahahaha there's a reason this is in minddump and not StupidKeyValueContentTracker/design.
	//regardless of whether or not Mutate _technically_ covers the "create" case, it's still slightly unclear whether or not it would so that is reason enough to not use it.
	//hmmm...

	//you "change matter" or you "create art" (because modifying art is itself creating new art)... but obviously "create" would then make you think it doesn't also include "modify" :(. and "change" does not make you think it'd include "create", fffff
	//why the fuck would you "sculpt" Art back into Whitespace, unless you're the pyromaniac type (which there's nothing wrong with)? I think the pyromaniac would be content with blowing up his computer and not being able to delete-a-key or set-a-key's-value-to-empty-string
	//yet still, often times sculpting _IS_ removing (removing unecessarily bloated code, for example. but the best example is of course "sculpting a motherfucking rock sculpture" IRL and not in some bullshit Virtual World (inb4 matrix etc): that is literally the removal of small bits of rock from a giant rock so as to "create" art! AHAH! I HAVE FOUND THE SOURCE OF MY CONFUSION! THE HIDDEN LOGICAL CONTRADICTION, FUCK YOU! CREATE IS DELETE in some contexts! Add is remove. Etc. So I want a word that encapsulates add,modify,delete and is evenly distributed to all 3 of those words and not biased to any of them. Add_or_Modify_or_Delete is perfectly acceptable in the code world <3, but bbut bbbut the poet in me wants to find a single word for it, or maybe even invent one if necessary! Mutate comes back to mind, but I still don't like it. I don't feel like "change" covers the delete case in addition to the add case. But actually the first sentence of this doc says that "change" does covery the add case! Man I'm liking sculpt more and more <3, might change back to it! You usually sculpt (in the abstract sense, not talking about "rock n chizzel" specific sculpting) by creating, but you can sculpt by removing. So imo as long as the "history" is kept (honestly for fun and archival purposes), delete is a perfectly acceptable form of creating art. Mind=blown what the fuck did I just say? "delete is create". Here it is with more verbosity for clarity: "To Delete a KeyValue (or set it to empty string) is to Create a TimeAndData_Timeline entry which either marks the key as deleted or sets the value to an empty string". I feel like storing empty strings is generally a bad idea and should be avoided and that should be "transparent" to the user. So if they set a value to an empty string, we REALLY mark the key as deleted. And if they get(key) that DNE, they are returned an empty string. It rules out the possibility of using a contains(key) (or 'exists') though! If you have a contains/exists method, you must differentiate between empty strings and keys that DNE... _OR_ have damn good documentation explaining why a exists(key) returns false immediately after a set(key, "") /*set to empty string*/. In fact arguably "deleting the key when they set the value to empty string" is DANGEROUS. Since the coder has to take the key not existing in account.

	//Ok so "contains" or "exists" methods should not exist, but instead value.isEmpty() should be used EXCLUSIVELY to determine whether a "key exists or not" (TODOoptional: allow the coder to specify a default value when key DNE or value.isEmpty() ?)
	//When I go for readability/understandability, introducing AN EXTRA FUCKING _STATE_ (key not exist vs key exists but is empty -- which one I go with or both is the debate) is fucking everything up so it makes it easier for readability/understandability to combine those two into one and to not allow the differentiation of the two by not exposing "exists" or "contains" methods. IT IS IMPOSSIBLE TO USE the "key dne" strat _alone_, because there's nothing to stop someone from calling set(key, ""); (unless I return false from 'set' I guess, but that's hacky as fuck). So since we always have to allow empty strings to be set (and optimizing them into deletes is DANGEROUS), we should just use empty strings as indicators that a key DNE. I am "changing" the QString in all 3 situations: add,modify,delete. KISS as fuck. //TODOreq: document 'get' explaining the key-dne case! it returns empty string. this is actually how a lot of Qt Containers work, xD (including the 'provide default value' option, which DO NOT CODE AT FIRST PLS).
	
	//hmm nvm scratch that, I went and put this in StupidKeyValueContentTracker: //readKey tries to read the key, emits readKeyFinished. data in that finished signal will be set to an empty string if the key does not exist, but success will still be true
void StupidKeyValueContentTracker::readKey(const QString &key, const QString &revision)
	//^but now I think that StupidKeyValueContentTracker should keep it's existing add/modify/remove interface and it is instead TimeAndData_Timeline which should have the "I use an empty string for key-DNE" (or an empty QJsonObject *cough*). but then how the fuck would StupidKeyValueContentTracker implement "add", if it was unable to differentiate beteen key not existing and key-existing-with-empty-string-as-value
	//fuck this philosophical mumbo jumbo, I want add/modify/delete in StupidKeyValueContentTracker and in order to do that I have to _allow_ exists() and set(key, "") to coreside in TimeAndData_Timeline. yes if you oversimplify there is a logical contradiction ("delete is create"), but who gives a fuck it's not really even that interesting but eh this was slightly fun writing I suppose! seemed like a fukken noble quest for truth and understanding, wasn't. Oh I want to write one more: "delete in StupidKeyValueContentTracker is create (well, 'append' technically) in TimeAndData_Timeline"
}


Inheritting unique_ptrs is probably a bad idea because then you're too tightly coupled to the unique_ptr. it provides SOME benefit but would mostly get in the way