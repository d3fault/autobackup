Elaborating:
Art in general is "left open to interpretation". You often hear artists say something along the lines of "it means whatever it means to you".
In code we call that undefined. You never want to do anything undefined, and you put up warnings to fellow developers indicating when/where something is undefined (so they too can steer clear).

Our art is explicitly defined. It must have the same meaning to all of us [coders], because it must have the same meaning to every computer.

OT+redundant: The art of a coder is rarely understood (compiled by computer != understood). First a fellow coder must have the ability to understand it (skill level), and then they must go through the process of understanding it (study it). You can look at someone else's code for days/weeks/etc not knowing exactly what the fuck it's doing or wondering "well why did they do it that way" and then you'll have your "aha" moment. That "aha" moment is when the art is finally appreciated (by someone other than the original artist). I think it's easier to create art-code from scratch than to understand someone else's, but that applies to all ideas in general I suppose. Our art is spread out over many files, with each maybe only having a line or two in each file. All the files/lines, and their interactions with each other, have to be taken into consideration together for the art to be seen. It's easier to disperse the art from it's original singular idea (UML, etc) into the many spread out files than to analyze the many spread out files and see the original art at work (that's why I and others (but not all) believe that the design itself is more valuable than the code (design = implementation...... fffff still haven't coded it I'd love coding so much more if I did)).