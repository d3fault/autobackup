I may have, or seem to have, delusions of grandure... but all the shit in my head compiles. Compilable and is Sharable. I want nothing else. Uncompilable can obviously be in comments (in other words, it just needs to be known to be nonsense (hey everybody loves a good bit of nonsense every now and then)). My dreams and goals yada yada are mostly software, so they WILL compile. Sharable also relates to software, but definitely affects speech as well! All speech is public and released under same exact license (DPL)! All thought is public and spoken publically and released under same exact license (DPL)! ;-). Goddamnit I wish I could get through with this fucking Rpc Generator code! It seems like hell and seems so close and far at the same time. I feel like I've been stuck here for the longest time. I know the answer is near, I just know it! Not the answer, but... the end! The end of Rpc Generator. It isn't that large of a project, and really it is all an investment to save on time later on. I'll be glad to move onto something with an easier design and more of just grunt work (that becomes fun when rpc generator is involved :-D). Rpc Generator is like a forklift. I just sit there and operate it and the machine does the heavy lifting. That's how most good programming is, regardless of whether or not it's a generator. We need to all merge our abstractions into a mega project with stable releases. There is always bleeding edge, it never stops. Stable releases are periodic that are feature frozen (partial modules not allowed in) and bug tested and ironed out. Because you can only ever really iron out bugs for a specific release. That's not to say that you shouldn't perform the first version of the bugfix on the bleeding edge branch, because you should. If you can't backport it then fuck that stable release, move onto the next one and put it where the old one would have been(???????lot of interpretation here). I use minimal/hardened for my filming, which pretty much means I use like a vga screen capture on top of code that I wrote on the machine. I do not test the code on the machine, but I output-only it to the test machine (who I don't care if he crashes and/or his data becomes corrupt). If the test results are good, I allow myself to run that code on the dev machine. the minimal/hardened one. of course we still do hella good backups for the dev machine, but we want it to never crash because it is the target of filming (the dev itself). I guess I accept bug fixes to minimal/hardened. I definitely also have a Stable box, whose contents I also don't give a fuck about (unless they are recorded I guess?). This is my playground and supersedes minimal/hardened in a sense that minimal/hardened is the core of it. This (stable) is run like Qt Project: allow-policy (just sign our CLA). Bleeding edge is unstable as fuck, and it is cherry picked from or whatever it's called. I guess each module is tracked independently and I mean that you can get a revision of a module and leave every other module out of your Stable snapshot (because you deem the other modules to be too unstable to be fixed in time for your Stable release (which is delegated N time for completion by competent and at least somewhat accurate software team that forms projections)).