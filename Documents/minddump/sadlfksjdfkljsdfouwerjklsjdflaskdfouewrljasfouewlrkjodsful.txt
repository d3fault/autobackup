Imagine you're doing a sweet grind in a bowl/halfpipe. Once you drop in and stop grinding, imagine (ignoring regular skateboarding physics lewl) you lack the momentum required to get high enough up to resume grinding. You are now stuck in the bowl. This is my shitty analog to LGPL->GPL. Once you "drop in" to GPL, there is no getting out. It stands to reason (ok i think i'm using that phrase wrong) that any/all LGPL content will EVENTUALLY become GPL-only. I will die and children's children's children's children (one of them is bound to) will choose GPL and fuck everything up. This assuming of course that copyright law isn't changed drastically by then (I hope it is). I also have no idea when the fuck copyright expires, I believe that's a heated debate ("Mickey Mouse Copyright" keeps extending or something?) and don't really give a shit about it anyways. This forced-grinding-forever (DPL) license sounds legit, but it also introduces weird fucking complications that I'm having a hard time solving.


1) How do the various forms of "content" react to the LGPL-esq style licenses (do they act as normal BY-SA/GPL? I am starting to think the LGPL part is just a linking excepction ONLY FOR SOFTWARE, so the GPL portion of the LGPL is all that remains for content???)
2) How do I utilize popular LGPL software in the "libre-only" (dpl) environment? I'm thinking that they are specialized and developer-approved "imports" that DPL projects (the content itself (weirdly also software (mindfuck)) can LINK TO, but how would I choose what projects to limit? Random and just thought of it: perhaps allowing any LGPL project to be a "specialized import" can be allowed by any user? I guess the main thing is that they need to be read-only?? We cannot and should not ALLOW writing/creating LGPL/GPL projects (this applies ONLY to my specific niche libre-only environment ("network"), I welcome RMS/etc to fork my code and to allow LGPL/GPL-only writable environments: dgaf. The analog to THEM now is that 'proprietary' shit would be read-only, etc... except they'd need a link exception for each proprietary use (or DPL use, but that is unrelated), whereas my DPL-only-network CAN utilize/link-to LGPL software without any exceptions whatsoever). Designing it in my head is proving to be a challenge. I mean the nitty gritty stuff. The licensing (DPL links to LGPL <3) is a peace of cake. But the actual implementation in terms of how the users will create/submit DPL "content" (software being the primary difficult example to solve) that links to read-only/"imported" LGPL/MPL "backing libs" or some such, is a mindfuck in itself. Again, it would be so fucking easy and much more convenient to make an LGPL-only "network"... I just don't like that ultimately all the content becomes GPL.


And another key topic I have been researching as of late is a "DPL" only OS, based on [preferably] OpenBSD. FreeBSD is ahead of the game in getting Clang/Non-Gnu BSD tangible, so I might have to use that (unless OpenBSD ends up borrowing all their completed progress woot)? Still, this isn't a huge deal... it just sounds like a "cool" distribution format. Considering everything in life is about doing something "cool", I guess it's worth pursuing (out of boredom)? Item (2) above is the primary complication, so I should focus on that.



I still want to and plan to use Qt Creator directly (perhaps renaming it because of Trademark issues?), but I don't know if I can even do that. Come to think of it, it's a process divide call, so it shouldn't be an issue. BUT there is the issue of me wanting to distribute it (this relates more to the above paragraph about the "cool" DPL distribution sadface). Perhaps a DPL-only distribution isn't feasible in the short term, ESPECIALLY considering I need to and want to ship Qt itself. Man I suck at licensing issues. Just when I think I understand them, I confuse the fuck out of myself. That DPL distribution would include LGPL content (thus negating it as even being DPL-only)? Fuck the distribution problem, focus on the DPL-Only-Network linking to LGPL libs problem you boob.



Am I going to create said network post launch (utilizing the DPL license for the launch _ONLY_), or am I going to launch ONTO the network itself? Bootstrap problems fml. Probably the former because I'm fuckin losing my mind in this no-input/no-output state and wish to leave it ASAP.


So, now I think the "heart of the works" problem has a different solution (since the "linking exception" only applies to software??????? Rationale: "common software linking methods (dlls) etc", but tbh idfk). I think that the work including the heart of the works would be soaked up and consumed by the license of the heart of the works (assuming Copyleft). This actually isn't THAT bad, and tbh I don't even know which I want. I'm just wandering aimlessly on the subject confused out of my mind. I should probably make a graph or chart and see how it applies to each form of media/content, but solving the "heart of the works" (novel) case comes first. The case law stated that since it included the heart of the works, it was DERIVATIVE. Copyleft states that DERIVATIVES must be licensed under the same terms. There is a "linking exception", but I'm starting to think it applies only to software. Meh need to re-read the LGPL :-/