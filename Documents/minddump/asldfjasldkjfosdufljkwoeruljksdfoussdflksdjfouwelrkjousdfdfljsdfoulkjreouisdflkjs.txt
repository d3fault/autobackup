The key to being an effective coder is MAKING your code fail, and then FIXING _THAT_. If you make your code fail in every way imaginable (assuming you're able to think of all the ways of course) and are also able to recover from each, you might have a decent piece of software. Amateurs tend to code for the "it will work" use case.... which is obviously where you need to start/learn... but it gives them the false impression that they're actually good at programming. Hell, I remember I used to think I was good (can't wait to be able to look back at me now and say the same thing :-P) back when I was doing the "typical" use case ONLY.