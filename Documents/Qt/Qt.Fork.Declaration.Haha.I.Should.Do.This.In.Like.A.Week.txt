Declaring a State of FUD && 'Official' Fork Proposal

tl;dr: Qt -> Qeh (mb-if-purchase: link to: http://qeh-project.org (todo/placeholder: "Gears are turning. We will update this page as soon as there is something to show. Expect Qeh 1.0.0 to be released under the terms of the Revised BSD approximately 3 months after the BSD Clause is invoked (this is what the legal text requires).". The words BSD Clause should hyperlink to the kdefreeqtfoundation.php site on KDE))

Microsoft's second greatest weapon is FUD (Fear, Uncertainty, and Doubt). Their greatest weapon is vendor lock-in, which is why they dislike Qt.

I think we can all agree that the Qt Project is in a state of FUD, and this is exactly where Microsoft wants us.

We need to be aware of and never forget the game we are playing (Qt is a framework to be feared (or loved, depending entirely on your perspective)). We need to play it offensively. Defense/waiting/reacting is a losing game, especially in the world of Development Frameworks.

For this reason (and because nobody else with merit has taken it upon themselves), I am proposing a fork.

A slow death (current future) is worse than an instant rebirth (fork) with promise of life.

--------In order for a fork to actually happen, there needs to be an incentive for one to happen (other than the current 'Qt is Dead' situation, which a lot of people seem to want to ride out).

A huge gain received from forking is that we could invoke the BSD Clause. The Revised BSD License is a more permissive Free Software license that enables us to publish our applications onto the Apple iOS App Store, among other things. Currently this requires a Qt Commercial License, but post-fork it would not.

Both of the board members at Nokia need to agree to invoke the BSD Clause (assuming both of the KDE members do too, which I'm pretty sure they will). 

So,
##################################################
Lars and Matthias: Will you invoke the BSD Clause?
##################################################
Will you make it happen? None of this if(microsoftBuysNokia) stuff. Yes I am in effect asking you to quit your jobs at Nokia. You will be a heros in the Free Software community and could probably very easily land jobs at some Qt (fork'd) Support company. Take your pick. Please transform the support company into an R&D software house while you're there (support + R&D would attract tons of clients if marketed correctly). Or start your own thing idc.

The fork will be the same Qt you've always loved, but here are some key differences:
1) New name obviously, due to Qt Trademark issues
2) Revised BSD Licensing, which means that you no longer need a Commercial License to target iOS. It also means that if/when you change the Qt source code and distribute the resulting binaries, you are not required to share your changes. This was previously only possible by purchasing a Commercial License from Digia. Note that these two reasons are really the same: the iOS app store is not LGPL compatible because the it adds restrictions to published content, exactly the kind of thing the LGPL tries to prevent (and succeeds via CopyLeft; the Revised BSD is a non-copyleft Free Software license).
3) No single company gets every Qt support contract (unless we set up a non-profit for this) -- we can, if we choose to, have a list of respectable/certified(?) support companies alphabetized whenever a user clicks "Support". If we are feeling nice, we can put Digia up above the alphabetized list and explain how they previously purchased Qt Commercial from Nokia and got screwed on that deal (as of this fork).
4) You are no longer required to sign the CLA (Contributor's License Agreement) with Nokia in order to contribute. The CLA gave Nokia/Digia the power to resell your code under _any_ license of their choosing. Instead, contributing code only needs to be licensed under the terms of the Revised BSD (or compatible?TODO).
5) unsure: BSD means we can accept more 3rd party code licenses? science/research this. the end of #4 mentions this too sort of? one case = code owner, the other = 3rd party
TODO: is that it?^^^^

What we call the fork isn't relevant. For simplicity and to keep changes to user code to a minimum, I vote that we call it Qeh (pronounced: "Qweh", like "meh"). The 'Q' is to represent the project's roots, and also allows us to keep the Q prefix in class names. The 'E' and 'H' stand for Eirik Chambe-Eng and Haavard Nord respectively, who are the founders of Trolltech/Qt.

Also, remember that the Qt/Nokia will probably not be discontinued for a while (could be wrong). Until Nokia completely phases out Qt, we will continue to receive updates, bug fixes, etc, including the entire 5.0.0 release should Nokia stick it out that long. We would only need to pull in their changes and resolve merge conflicts (cheap).

As a priority and in order to be taken seriously, our first goal should be to re-release 4.8.2 as our flagship product: Qeh 1.0.0 under the terms of the Revised BSD. The Qt 5.0.0 target will become Qeh 2.0.0.

A starting list of tasks that need to be done before a 1.0.0 release can happen (afaik): <--There will be a wiki page for this at http://qeh-project.org/wiki/Path_To_Initial_1_0_0_BSD_Fork_Release once a website is up and running. Anybody can add a task and should mark themselves as working on a task before beginning. This is just until we have gerrit up and running, in which case that's where the tasks will go.
1) Rename all instances of Qt to Qeh. A script (however hacky) to do this would be the best solution, but some parts may need to be done manually.
2) Platform Plugins (QPA) for every platform aside from x11 would need to be re-created and/or re-licensed under the terms of the Revised BSD. The reason for this is that the BSD Clause only applies to the "x11 version of Qt" (it was written before Qt Plaform Abstraction existed <3. There is no longer an "x11 version of Qt", but the platform plugins for windows/mac/etc DO qualify as "windows/mac versions of Qt", which the legal text containing the BSD Clause explicitly excludes). To read this yourself: http://www.kde.org/community/whatiskde/images/nokia-agreement-3.jpg . Take note that "KDE Windows System" really means "x11", and also observe (and laugh at) the outdated explicit exclusion of MS Windows, Macintosh, Symbian, etc.
3) The Licenses in each file need to be updated to the Revised BSD

According to the legal text, invoking the BSD Clause takes 3 months from the date Nokia was notified via [snail] mail. So in the best case scenario (means Nokia/KDE board members meet and agree on day 1 -- not a likely scenario), we have 3 months to get a 1.0.0 release ready. This should be plenty of time, and we'd have to release under the LGPL for those 3 months (or just wait and have a "Launch Day").


So what about...

Android Target?
iOS Target?
Native Runtime Commitment?
Future of Qt Declarative?
QWidgets2?
Etc

I can't promise anything with respect to the above, but I would like to see a more engaging community with an official voting process similar to the Fedora Project's: https://admin.fedoraproject.org/voting/
I can't promise a voting system either, as ultimately it isn't up to me.


MAYBE:
I have taken it upon myself to purchase qeh-project.org, and will point it's DNS to a server provided by a member with merit in what will be considered the first steps of the fork. The next step will be to install a wiki and the create wiki page http://qeh-project.org/wiki/Path_To_Initial_1_0_0_BSD_Fork_Release . I will hand over the domain to the Chief Maintainer (TODO: this is a potential mistake, they could fuck us over. an 'entity' such as a company is better at holding this, so maybe I should hold it myself?), once one is elected (it can be Lars again for all I care. I don't have a vote because I have no merit). TODOalso: up to what level does the contributor's status transfer over to the fork? Obviously approvers/committers, but maintainers maybe not (???) and definitely not the Chief Maintainer. Perhaps the meritocratic governance model has instructions on what to do in the event of a fork. I could be wrong, but want to at least highlight the possibility.



random/rant/TODO:
Surviving in Open Governance will prove to be a challenge because there aren't formally any non-technical positions in charge of overall direction. On one hand this is great, as all decisions will be based on technical merit. On another, this might hinder progress as each member is busy with their domain-specific technical work and nobody has the time to step back and observe/modify/extend the overall direction of the project. I could be, and hope I am, wrong.


For the time being I am declaring myself a rally point and fork coordinator. This is because nobody else is willing to do it. I will not give myself a position of power and will go back to being powerless (aside from my exuberant voice) once the fork is complete.

maybe: "If this page does not yet exist: http://qeh-project.org/wiki/Path_To_Initial_1_0_0_BSD_Fork_Release , email me if you want to with the fork. The first thing we need is server space and web admins to help get the wiki up and running so that I am no longer the coordination point. Remember, this has to be done by the community, not a company. I will prefer people with merit when selecting for tasks." <- I could maybe use every email to make the fork happen at my will, not having to do a single thing (except organize it all... which is definitely a 'single thing').
^that help email might be all i need to direct my own little fork-e-poo. That plus the 'gears are turning' initial default page on qeh-project.org should be enough smoke and mirrors that people will have enough confidence to jump.

TODO: IRC CHANNEL???? Might be easier/faster coordination point (and requires way less of me). Take out this stuff about emailing me. I'm thinking yes.

Re: Meritocratic Status in the Qt Project
Approvers/Committers/Maintainers all have their status transferred over. Maintainers of modules in the fork would only need to be responsible for pulling in (and testing) commits done by that module's maintainer in the Qt/Nokia branch (if the maintainers don't jump ship). If a module loses it's maintainer in the Qt/Nokia branch and the the maintainer doesn't come to the fork, then we can no longer maintain that module by simply pulling it's changes. Only then does the module receive a 'Needs Maintainer' status. A maintainer of the Qt/Nokia branch can opt for maintainer status in the Qeh fork automatically get it. Only Approvers/Committers/Maintainers keep their status in the fork. How do they prove themselves to be the same person? Perhaps a forum post on qt-project.org (err wait are those the same as gerrit accounts yet? that's what matters)? Perhaps a comment on a tester(me?)-specified bug report/commit in gerrit. Cost: Spam. Reward: Secure Transfer of Meritocracy Statuses. I could also let them specify the comment so long as they link me to it beforehand so I can see it appear. This will reduce in necessary spam comments. "pick something you want to comment on and then link me before you do". These can also be filed as bug reports in the Qeh gerrit that contain a link pointing to a report in the Nokia Gerrit and a declaration of what he's about to say. A Qeh Gerrit member with status says "ok" (confirming they have seen it before the user trying to get their status back), the new member makes a post on Nokia gerrit, posts that he has done so on Qeh gerrit which is then approved by Qeh member with merit. This way I don't have to coordinate with every member to re-assign statuses. I can even delegate the 'upgrade status' power to someone temporarily (just for delegating purposes), the power goes to Chief Maintainer once one is elected.

Even if you don't want to contribute, your vocal support in this thread would be appreciated. It's obvious this will get a lot of haters responding, and we need at least some balance in the like/dislike factor to give confidence to people to jump ship.

All of this email is moot and I just wasted $10 if either Lars or Matthias do not agree to invoke the BSD Clause,
d3fault