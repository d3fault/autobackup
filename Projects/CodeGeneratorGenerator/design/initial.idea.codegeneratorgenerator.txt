CodeGeneratorGenerator

As input, I take a directory of source code files (RequestResponseContracts2 will suffice).
Output is a code generator which queries the user for the "list of symbolNames to do str.replace for".


as a 2nd input arg (or perhaps just a named file in the root dir of the 1st input arg (YES)), a list of symbols _IN_ the directory described in the 1st input arg, as in _IN_ the files themselves.

So the generated code generator then takes as input yet-again that list of symbols, now this time used for the end-users' specific code. So it looks like this: "watch for businessClass,businessClass::someSlot -> make code generator that can now substitute businessClass and businessClass::someSlot for whatever the user provides in json format -> end user generates a LibFfmpeg and LibFfmpeg::encodeVideo filled template provided in the input to codeGeneratorGenerator(that directory of files (it's copy/pasted and strReplace'd))".

Don't worry about AnotherSlot or AnotherBusinessClass yet, even though I suspect they will factor in later! KISS and incremental!

step 1) make app that copy/pastes an entire directory to a QTemporaryDirectory that is set to NOT AutoDelete it's created directory upon destruction.
step 2) in that source directory from step 1 is a file named 'symbology.cggd' (sup willem. also cggd stands for CodeGeneratorGeneratorData. [for now] it's a line-delimited list of symbols to fucking parse both out of that file and in EVERY file in the dir (recursively). each time an occurance of those symbols is found in a file, generate some sha256-unique hash thing surrounded by percent signs and all that jazz %-UNIQUE-SYMBOL-sha256sumGoesHere%-, so that we can easily do strReplace in the code that lives in the code generator that is TO BE GENERATED. btw after parsing the symbology.cggd, we should sort by length and then iterate in REVERSE (longest first). actually fuck this sha256 shit, since we have to auto-parse symbols ANYWAYS, there is no use to do the sha256 strat unless we have some "training" shit going on or something during CodeGeneratorGenerator execution phase... perhaps to resolve false positives in the parsing of the symbols? Hmm I'd say TO KEEP IT KISS [for now], do NOT use the sha256 strat... the generated code generator will then have those symbols parsed from symbology.cggd hard coded in it's C++, and will strReplace them (again, longest symbol FIRST) using input gathered from user

Eh before I go blindly on forwards, I need to think and make sure this project is even feasible. Namely, "slots" or "methods" in general, which, from the "compiling template source directory", need to be REPEATED. That's the key. Repeated. There's chunks of text SURROUNDING the "someSlot" symbol that needs to be _repeated_. Not just a simple strReplace job, at least not when you factor in anotherSlot. I'm talking about a source/cpp file here, the header "someSlot" decl is at least a TINY bit easier to handle: repeat that one LINE (mult-line slot decls (some do this, but I don't. <3 wordwrap) would fail then xD). but for the source impl, where the slot is DEFINED, it's almost always multiple lines and the amount of lines can vary a lot too.

Yea I think this project is fucked unless I can come up with a way to say "repeat this CHUNK of text, strReplacing someSlot symbol occurances within that chunk, for every slot the ultimate end-user provides (user of the code generator that is generated)". The more "input" the CodeGeneratorGenerator requires, the less useful it is and the harder to implement it becomes. You know I'm actually fine with this project beging fucked, because then it makes it easier for me to decide to go work on SocialNetworkTimeline :-P.

The pattern of "repeating specific chunks" though, is actually a pretty common occurance in coding a code generator (and therefore relevant to a CodeGeneratorGenerator). I just recently wrote a code generator manually (UserInterfaceSkeletonGenerator), and I certainly recall using assloads of Q_FOREACH(slots) and Q_FOREACH(signals) etc all throughout the code. I used MY MIND though, just looking at a chunk/line, to decide whether or not a given chunk/line needs to be repeated N times (onces for each slot/signal/etc). Passing that information to CodeGeneratorGenerator would be possible but a tad difficult, whereas teaching CodeGeneratorGenerator to be able to determine that stuff on it's own might be downright impossible [without AI]. Hmm, if I introduced AnotherSlot into the "compiling template" input, then MAYBE it'd be possible. still difficult I think. "within a large chunk of text (a single file), detect two IDENTICAL sub-chunks of text that ONLY differ in the occurance of the symbol 'someSlot' vs 'anotherSlot'". <-- I do think that's certainly POSSIBLE, but the algorithm to use doesn't jump out at me. It actually sounds kind of like the kind of thing a COMPRESSION algorithm would ~sorta~ do. MAYBE I could steal some compression lib's code, but eh deciphering compression lib code sounds like a mindfuck: them bitches are mathmaticians etc. And besides I think compression algorithms are looking for PERFECTLY IDENTICAL chunks, whereas I'm looking for IDENTICAL EXCEPT FOR THE SLOTSYMBOL (someSlot, anotherSlot). Yea I do think that coding THAT is the only way to unfuck this project. Compiling templates would have to be a little bit longer (using both someSlot and anotherSlot, rather than just someSlot), but actually that's not such a huge deal because it's actually usually beneficial to show yourself a compiling example of how "multiple slots" (or multiple classes, since AnotherClass is relevant to all this as well) fit into the picture.

Alternatively, CodeGeneratorGenerator could be INTERACTIVE (which was how I originally thought it up), and we could simply MARK (manually, using MY MIND <3), which chunks/lines need to be repeated N times (for signals/slots/classes/etc). Like: "hey Mr. CodeGeneratorGenerator, this set of lines right here all belong to this symbol (someSlot), where that symbol you're saying it belongs to, EXISTS _IN_ the very chunk/set-of-lines". Maybe "symbol expansion" of sorts: CodeGeneratorGenerator interactively shows you all the occurances of someSlot, then as you go along you can tell it to INCLUDE more characters "to the left" and/or "to the right" (ignoring newlines). Earlier on (before this phase) you'd have specified that someSlot is something "to be repeated", so you wouldn't have to specify it over and over for each line. Man this project blew up in my face, fuck this.
