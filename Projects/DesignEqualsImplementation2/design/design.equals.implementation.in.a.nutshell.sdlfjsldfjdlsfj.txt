Elaborating on Documents/Qt/qt.in.a.nutshell.sldfjdlsfjlsdkjf.txt , Qt provides very powerful tools to C++ programmers. There is a learning curve to using Qt, but more importantly there is often times more code to write if you want to set things up properly to be "the Qt way" (however it's worth noting that using Qt is usually much faster than other languages/toolkits. There are different aspects, and in this one I'm talking about "vanilla synchronous light-on-the-OO mostly-procedural C++" being 'faster to write' than "the Qt way of properly designed QObject inheriting classes). To name a few POWERFUL yet TEDIOUS-TO-WRITE technologies Qt provides: signals/slots, Q_PROPERTIES, make-your-own Implicitly Shared (thread-safe copy-on-write) classes with ease (there are certainly others, but those are the ones most relevant to this doc). Each of those is worth using, but they require a bit of additional work before you can begin using. Design = Implementation aims to lessen the time spent setting up those technologies, aiming at being as fast as (but perhaps faster than) the "vanilla procedural C++" coding styles I/we tend to use when coding something quick.

So d=i is not really a technology on it's own, but it speeds up our use of Qt's added/provided technology. BUT THEN AGAIN, arguably assembly is not a new technology on it's own, it's just a faster way to write binary. And arguably C/C++ aren't technologies on their own, just a faster way to write assembly ;-).