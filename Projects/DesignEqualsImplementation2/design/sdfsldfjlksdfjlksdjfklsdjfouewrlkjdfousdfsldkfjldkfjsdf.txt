An application (or "project") is just a collection of use cases generally with a combined gui (auto-gen gui as well, but OT) and the implementations to ... implement... those use cases. The use cases only ever work on interfaces, but this detail is spared from you. Either that, or you can click "extract (abstract (abstract to?)) interface" and IImplementation is auto-typed (that is, if they created/used an object named Foo in a use case, IFoo is shown as the default-but-changeable-obviously interface that the use case depends on/generates (is?). A use case is just a series of class interfaces all connected together at various points, with a slot invoke (which we already are) to start it all off. An object is a library. Perhaps it should be "an object, and similar objects, are libraries". But meh, an object is an object.

I do want to keep the concept of children after all, but I want to introduce thread=0, which is the parent thread (gui thread if you never change it (or parent thread if he is on a different thread and hasA you)). Thread is to
...hmm can't remember.


Blah idk, but I decided I want to allow "single thread UML use case designing" and that I want it to be the same use case scene, just with a different line(arbitrary: circle at end of line) than the arrow for the thread-safe QObject<->QObject relationships (both hasA relationships and multiple-top-level-objects-interfacing-with-each-other-via-signals/slots-native-to-their-objects-but-connected-by-this-very-fucking-use-case(such as: IMediaFrameParser::frameParsed(MediaFrame*) being connected by application (use case) logic to: IMediaFrameDecoder::decodeFrame(MediaFrame*) , which perhaps the "application"/"project" is called "Media Player" and the use case is called "Decode muxed media stream". It is use case specific whether or not you want a sibling or parent/child relationship, so I should allow both.

PrivateMethod (which I do want to be able to use non-thread-safe UML itself, but that's OT atm) is ordered. Slot body is too. Use case should not have "slot with current context", but instead insertion at any point abilities (I am glad now that the class is of very little use, and confused at why I rigged ExitSignal so complex (why not just append it at generation/serialization time? wtf). In fact before I even started this doc I wrote in an unsaved other doc (never meant to be saved): 'eliminate "slot with current context"'. I think one of the biggest confusions was I thought "ordered list of use case events" was more crucial than it is. The slot bodies of a private method (BTW TODOreq: visually different thread-safe vs. not-thread-safe modes, change it up bigtime) are where the main UML stuff will come in to play actually. It would be stupid of me to do this refactor and NOT include the private-method-not-thread-safe UML editor refactor with it, because I'd just have to do it later and work would be wasted.

OT: The concept of parent is confusing when talking both about polymorphism, qobject parent system, and parent-hasA-child relationships