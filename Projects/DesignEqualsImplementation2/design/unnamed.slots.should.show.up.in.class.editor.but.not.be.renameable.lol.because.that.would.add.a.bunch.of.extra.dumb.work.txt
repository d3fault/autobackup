It took me toying around simulating the situation in umbrello to decide this: I finally know what to do for the unnamed slot hack thing. No statements = no slot in backend (so ghost in frontend). When a statement is added to a slot that's unnamed and then you go and look at that class in the class editor, you see that slot as "unnamed slot 0" (incrementing ofc). Once you connect a line to the slot to trigger it ("name" it), that unnamed slot 0 disappears ofc (so the statement copying over logic is still needed).

We should not disable source code generation when an unnamed slot is detected, but we should warn them about it (and any others) occurance in the generate source code dialog. Source code for that use case is simply not generated. So that being said, I guess there needs to be a way to differentiate between an unnamed slot (which is displayed as 'unnamed slot 0' and a slot named 'unnamed slot 0' (although perhaps the mere fact that there's spaces in the name is good enough -- since a slot cannot have spaces in it's name)).

TODOreq: what the fuck do i do if the user adds a statement to an unnamed slot and then tries to rename the "unnamed slot 0" in the class editor? should i even allow renaming? My options include: auto-connect to actor -- but that idea is shit (there could be another class lifeline 'to the left' that we could/should connect to... so it's better to do nothing). Is it possible for me to have a NAMED slot with statements without having an arrow being drawn to it from something 'from the left'? It kind of makes sense that that scenario could/should happen, but I can't really figure out how I'd represent that in the GUI. Could (should?) there be another mode where a slot is defined irrespective of any use case? If there were, then it definitely makes sense to have a named slot with statements and no connection 'to the left'. In the abstract sense (taking a step back) and considering code itself, it does make sense to have a slot by itself (no use case) and to define the slot's body.

HOWEVER it simplifies _MY_ job a lot by requiring something to be connected 'to the left' in order for the slot to be named. If you want a named slot and body/statements, just connect it to the actor and have that be the whole use case. A slot _IS_ a use case [entry point]!

So those 'unnamed slot 0' etc things in the class editor should NOT be name-able -- I guess they should be in a different part of the gui so as to be read-only (perhaps double clicking any of them takes you to the use case... where THERE you can name it by drawing the fucking line).

Of course, renaming already named slots in the class editor is a desireable feature (and also the same rename functionality should be present in use case mode as well). It's kind of weird, but necessary, that a slot must first be named before it can be renamed (and hell, when I write it out, it makes sense)