Another way to establish a connection between two distant classes without modifying the intermediate classes is to use QObject::findChild[ren] in the common ancestor (likely a "project class" (psly a "use case class")). I've never used the method before, but it'd probably work. However it looks like it'd require that the intermediate classes don't use the same variable name elsewhere... so it has a bit of variable pollution. It is also a tad inefficient, but since it's just initialize code it's not a huge deal. I've also never used QObject::name before, but eh there's a first time for everything :-P. I could also automatically/transparently sufficiently obfuscate the object name so that it's highly unlikely to be used elsewhere (a mix of the variable name, maybe some scope details, and some randomly generated characters would do). I'm not sure I want to go down this road, but it's there.

One downside to this is that we'd need an entire new copy of a class for each instance. Or perhaps a "name all children, using this as base" to differentiate instances (who obviously have the same children, and would therefore not name them differently (or something)).