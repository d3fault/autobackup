All variable uses (whether arg param or member usage (local variables would only exist in C++ drop down mode for now, so are not relevant)) simply mark a dependency on the underlying type, similar to the connection resolving I think or how I thought I wanted to resolve object inclusion earlier (before I decided to still spit out unreferenced classes during code-gen). There needn't be any concrete (non-ptr/etc) uses of it in entire app, so there mustn't be a concrete place the variables existence in the app is 'marked'. The most difficult part to grasp about this upcoming refactor is that even my "private hasA members" will/should be using the new refactored "variable" logic/code/design