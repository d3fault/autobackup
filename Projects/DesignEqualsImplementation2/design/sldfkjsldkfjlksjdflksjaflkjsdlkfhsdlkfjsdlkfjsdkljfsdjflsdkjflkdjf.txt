since iterating use cases modifies classes, every use case a class is associated with must be iterated in order to generate that class. even use cases not referenced in that project. should i keep a list of use-case-appearances inside the class (and that value is shared between projects and presumably app instances (unless a "hold back version" scheme is used like svn:externals and git submodules i used)). it is bad data organizing if you have class keep track of the use cases he occurs in, BUT i can't think of anywhere else to put it and it would work and h4x and kiss. so iterating the use cases will be a side effect of iterating the classes. BUT THAT MEANS REFACTOR because right now we -- NVM it doesn't much. Errr I decided to be a code gen and not an analyzer of any sort. Kind of like git, it will do as told and not try to be too smart for it's own good. So yes in fact I am just going to Q_FOREACH((Project*)this->classes()); simple as that. i COULD care whether or not the classes are even used in any use cases, BUT i'm not going to because that is an optimization job AND i think the fucking compiler already does it for me. AND i also realized that people might get pissed if their designed uml class was not generated. holy shit that last one is the best argument of them all and i didn't realize it's significance until typing it out even though i did think of it a little while ago. i forget that some people just like uml code generators by themselves. i mean the class diagram view only. Either they don't know how to write a use case, don't want to write a use case, can't write a use case (app not flexible enough), or something else along these lines. HOWEVER I just realized again that use cases are my entry points to class lifelines are my entry point to instances of classes, which are needed at some point in time definitely. Still actually I think every designed class can still be generated without knowing it's own instance (it knows it's child/member instances, but that is a "BTW" and semi-irrelevant).