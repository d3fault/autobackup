As my github account indicates as of yesterday, I got llvm/clang working and modifieid the recursive ast tutorial to decompose a function and spit out any unknown types it encounters. My strategy is this: put that bitch in a while true loop where each "unknown type" encountered is simply "typedef int NewClass;" prepended to the function statement (so now the type is known) before the next while true iteration. If the error count ever doesn't match the amount of unknown classes (more importantly, the iteration at the end after no unknown types detected has any other errors), or if more not exactly 1 functions were parsed (0 = fail, > 1 = fail), then we don't accept the user input and can even spit out clang's syntax error messages!!!! QualType->isScalar() seems to give me just about every C/C++ "internal" type, with the exception of some weird "half" value I've never encountered (so I will make an exception for that manually, but fuck it that's low pri).