-dep libclang

Parse a C++ POD header/class/struct for input, output a Qt Implicitly Shared Data (aka "EmployeeData" in the Qt docs). this actually sounds ez and useful as fuck.

to start off with [and as default] for 0.1, I think getters should be public, setters private, and changed-notification-signals present. future versions could allow customization.

designEqualfImplementation2 has a method along the following lines: outputImplicitlySharedData(DesignEqualsImplementationData *data); //ofc this is pseudo code and is probably named differently in d=i itself. what I'm saying is that d=i already has both a gui for it and a serialization format and even working code generating functionality. it's just a matter of extracting that code and adding libclang parsing [instead of using d=i's binary file format].

so anyways, the context that led me to think of this: I could write an "intro to programming" aimed at hannah's level of skill. a QUICK INTRO to Qt/C++ (no coding skills required, but obviously some are helpful), but aimed at more intelligent people rather than the general public (hence _QUICK_ intro). so yea in that intro tutorial thing I could show how to do a basic-as-fuck Qt/C++ "database" app. I should maybe use "EmplyeeData" (from Qt docs) as the chosen variable names in that same tutorial. But initially the tutorial would NOT introduce implicit sharing stuff at all. After the explaination of KISS/succinct single-threaded EmployeeData Qt/C++ db [example/tutorial] app (note in this first version we do NOT use implicit sharing despite the name being EmployeeData), we could BRIEFLY/KISSLY (gud SIMPLE engrish riting is key here) describe the "cross threading" problems in coding, explaining how if you don't write thread-safe code then your code can't be [safely] used on those multiple cores you shelled out so much extra cash for. but yea NORMALLY the coding tutorials would at this point explain the intricacies of atomics and mutxes and wait conditions and BLAH BLAH BLAH. my tutorial will say "use this app PODStruct2QImplicitlySharedData to convert EmployeeData into a form that is now thread-safe (and describe HOW it's thread-safe; namely what COW means). I am especially pleased that Qt's Implicit Sharing stuff doesn't even require a QCoreApplication event loop to be running! meaning it integrates very easily with other toolkits/frameworks (but you should be using Qt anyways kek). so we link to the PODStruct2QImplicitlySharedData binary/source, and/but we also link to a handful of Qt's docs IF THEY ARE CURIOUS ABOUT THE INTERNALS (Qt Object model, Qt Implicit Sharing). but if they don't want to know the internals (trust me ignorance is bliss when it comes to cross-threading shiz xD -- and that's why Qt kicks ass <3 Qt::AutoConnection) then they simply use PODStruct2QImplicitlySharedData and NOT FUCKING WORRY ABOUT IT. hell I wish that's the route into coding I took!