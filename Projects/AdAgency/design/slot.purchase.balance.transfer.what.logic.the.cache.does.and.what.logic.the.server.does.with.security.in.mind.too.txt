for a slot purchase, a balance transfer, the bulk of the logic (aside from the balance transfer itself) takes place entirely in the client/web-facing-cache. the server only performs a balance transfer at the request of the client. but in the client's code, we assign a username to a slot that belongs to a different user (i guess you can buy your own slot but that is pointless as hell)... that's in the appdb, which also has a list of usernames. it also contains the un-confirmed (via email) usernames and their wt authtokens etc (not necessarily the same table.. just the same db. not the "cached user bank accounts" db. (which really could both just be tables in the same db. doesn't matter). but my point is that the front-end/cache should keep a copy of the user's public key (ACTUALLY, it shouldn't. we do NOT want to trust the cache/client... even temporarily). we should not update the client/cache until the server does it's balance transfer operation (including verifying the signed permission slip against the user's public cert)... and THEN the cache will say "aight nigga, the slot is yours" (it can go into a "slot purchase pending" state (though we won't be there long, just until server responds) so that nobody else simultaneously purchases the slot. and as an optimization step ONLY****, we can store the user's public cert on the cache before locking the slot to the user and sending the request to the server. the server is our authority. the cache is not trusted at all.