rpc generator
multiple rpc services
multiple backends
all under 1 "rpcclientshelper" class?
each rpc services has it's own rpcclienthelper class (RpcBankServerClientsHelper)

different instances of the same backend (multiple "bank accounts")


this is actually a TODOreq asap because i need CompilingExamples to be portable and currently it is not because the backend inherits from a Q_OBJECT specific for that rpc service

i could grow said Q_OBJECT to account for other rpc services

but what if i want to expose 3 rpc services and only one application (exposing itself!) only uses 2 of those services and a completely different process uses the 3rd?


obvioiusly RpcServiceId makes sense

does the Q_OBJECT that the business implements contain the RpcServiceId(s) and report it/them to the giant/shared(among processes? how the? impossibru!!! (well..)) RpcClientsHelper?


so we won't have cases where there are RpcServices that are unused by a particular process
if a process uses one, it uses all
so we CAN just simply grow that Q_OBJECT that it inherits?
or should it be a separate one? since it's a seaparate backend?
but what if it's the same backend but multiple "bank accounts"
i think i remembered saying that the "bank account id" would be a parameter of each action, right? again i'm getting ambiguious with "bank account for rpc service -- id" and "bank account for a specific user of an rpc service -- id" (the latter being an overpay protection feature. bitcoin binary won't let us pay out what isn't there)


the 2nd rpc service id could also point to a different instance of the same code... but this is all semantics really with how i want to differentiate "bank account for rpc service -- id". fuck it


is is most likely going to be a different backend object... so why would i 

ahh fuck
my brain!

eh the "ClientsHelper" is always up and has a zero-or-more amount of Rpc Services registered-and-started or unknown-andOr-stopped based on the RpcServiceId that the particular Rpc Service provides. The auto-generated Q_OBJECT that the Rpc Service "busineness" inherits provides the Rpc Service Id. It is auto-generated by Rpc Generator so that when setting up huge meshes, it can bulk create many clients all using that Rpc Service Id... and also 'neighbor' server nodes with the same Rpc Service Id (since i'm asynchronous/horizontal and scalable as fuck :-D). Actually having it auto-generated is optional.. it can be an arbitrary string lmfao... but i guess i might as well make it auto-generated :-P


random common sense statement: there is a huge difference between the rpc service id and the client id (cookie)
there is also definitely a difference between this shit and http requests, although from this perspective (rpc service id = domain, client id = cookie) they look very similar :-P. or at least that's what i coinvince myself!!! :-X