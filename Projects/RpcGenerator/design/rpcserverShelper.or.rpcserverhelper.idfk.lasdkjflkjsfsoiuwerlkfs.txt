What the fuck? The name "RpcServerHelper" is singular, but shouldn't it be plural? Am I going to be instantiating an RpcServerHelper per connection and round-robin'ing them somewhere in my business code? Do I need to change the design so that RpcServersHelper" is what it's called and the auto generated rpc code does the round robin'ing itself? It does sound tempting, but depends entirely on how I want Rpc Generator to function. Generally Clients only have one Server but Servers can have many Clients. However since I'm building a reliable system I am going to have many Clients and many Servers. I don't know if that should be factored into Rpc Generator's design or if it should be at a higher level (even if that higher level is dependent on Rpc Generator!). I obviously like the seemlessness of letting RpcServersHelper do the round-robin'ing (and knowing not to send to dropped connections etc), but I also like the KISS approach of "a client has a single server"). Wtf. Perhaps RpcServersHelper _DOES_ exist and it is merely an aggregate of RpcServerHelper[s] and does the round robin'ing? This way I have both? Does Servers helper become part of Rpc Generator or is it some other [higher level] util/lib that wraps Rpc Generator? I guess ideally since I ultimately want to be able to specify my Client and Server details (all of them for all of them), ssl certs etc and actually give me the code to make it work..... since I want all of that to be spat out from my Rpc Generator (Rpc Generator has a top down view of the network (ideally I'm going to build on that concept and somehow utilize it in designEquals TODOreq) and generates all necessary files, including variations between neighbor clients and neighbor servers). So that being said, I guess I want it to be called RpcServersHelper and to have all the actual server information hard-coded within? I mean I could accept it as an argument but if the Rpc Generator has the top-down view of the whole network, it can/should automatically fill that shit out? Or should I do both where the default argument is the rpc-generated-top-down-view-connections-details? What cases will I want to manually specify which servers to use in the client's business? Remember that "Rpc Generator" is 'wrapping' a server... which has a fixed IP address. And by providing "RpcServer[s]Helper" through generation, we are wrapping that singular instance of it! This is not necessarily always the case (it could wrap any/all instances of it), but is the case if I want my Rpc Generator to have a top down view of the network as a whole. I still think it's more flexible to have the server connection arguments be able to be specified in the client's business (each client will have to specify every server in their business -- duplicate code (bad) noted!), but I also don't want to have to type them (because I am lazy). I'm trying to visualize integration with designEquals and the hardest part is visualizing protocol version upgrades and/or server additions/subtractions. I don't even know what kind of view that would go in. It does need to be able to (TODOreq: right? what the fuck?) do it without recompiling... but I'm nowhere near there yet (which might mean my design is fucked from the start (I'm under the impression I can hack it in later (tbd))).

Even if RpcServerHelper does become plural, doesn't it stay singular in my use case diagrams (clean/ugly disconnect) i just made? Because regardless, a client still only has one server [for a particular connection]. Man this is confusing and idk how I completely missed that portion of the design. Maybe it's because I'm working solely on the server right now. Client is so out of date I'm going to cringe when I open it again :-/ (but also excited that I just have to mirror/reverse the server code (with *some* thinking required)).

The biggest pro for integrating the plural'ness is that the client simply connects his Actions in the business to the RpcServersHelper, and then RpcServersHelper takes care of round robining and ALL the connection related mumbo jumbo and to-be-repeated-andor-reused-in-other-client-businesses-everywhere etc etc that is a complete fucking bore and that I want to code once and never have to touch again (is that a pipe dream at this point? is this code even going to be feasible to complete? (worse, am I just duplicating TCP? Am I even accomplishing anything? WTF? There is still a thread separating my server/socket and the business, so don't we suffere from the same problems as TCP at this point? That data can be lost because the server can crash? Or am I adding value by doing generic errors and parameters and actions and broadcasts and acking? tcp already has acking and socket errors, it's just that idk wtf has been sent or received at that point. shit didn't i just realize that i still don't know what has been sent at that point? do i need a 'promise' on the request? wouldn't that mean i need to ack the promise? FML this is so ridiculously complex i fucking hate network code and should just off myself)).

It almost makes sense to, at this point, have the motherfucking client look up in a dht (among clients) which servers are to be used in the rpc connections. Blah fs-dependency again, I don't know what's going on anymore.

Rpc Generator should stay in minimized and least-dependent mode of operation possible. Higher level tools can utilize/integrate with it.