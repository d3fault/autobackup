#ifndef RPCBANKSERVER_H
#define RPCBANKSERVER_H

#include <QThread>

#include "objectonthreadhelper.h"
#include "AutoGeneratedRpcBankServerCode/rpcbankserverclientshelper.h"
#include "bankdbhelper.h"
#include "rpcbitcoinhelper.h"

class RpcBankServer : public QObject /* : public IRpcBankServerBusiness */ //removing that IRpcBankServerBusiness means we can represent multiple Rpc Services simultaneously? Being an Rpc Service should not make the business depend on BEING a certain type of object, because now we can't be multiple of them since they are QObjects and QObjects have a diamond inheritence problem
{
    Q_OBJECT
public:
    explicit RpcBankServer(QObject *parent = 0);
    void instructBackendObjectsToClaimRelevantBroadcastDispensers();
    void moveBackendBusinessObjectsToTheirOwnThreadsAndStartTheThreads();
    void connectRpcBankServerClientActionRequestSignalsToBankServerImplSlots(IEmitRpcBankServerActionRequestSignalsWithMessageAsParamAndIAcceptAllDeliveries *actionRequestSignalEmitter);
private:
    RpcBankServerClientsHelper *m_RpcBankServerClientsHelper;

    //Instantiate
    inline void initializeAllBackendsIfIAmInitializedAndAllBackendThreadsAreInstantiated() { if(m_Initialized && (m_BitcoinInstantiated)) initializeAllBackends(); }
    void initializeAllBackends();
    //self
    bool m_Initialized;
    //all backends (that have their own threads)
    bool m_BitcoinInstantiated;
    //etc


    //Initialize
    inline void emitDoneUsingRpcBankServerClientsHelperDuringInitializationIfAllRelevantBackendsAreDoneUsingIt() { if(m_RpcBankServerClientsHelper->broadcastDispensers()->everyDispenserIsCreated()) emit doneUsingRpcBankServerClientsHelperDuringInitialization(); }

    ObjectOnThreadHelper<BankDbHelper> m_BankDbHelperThreadHelper;
    ObjectOnThreadHelper<RpcBitcoinHelper> m_BitcoinThreadHelper;

    void daisyChainInitStartStopConnections();
signals:
    void d(const QString &);
    void initialized();
    void started();
    void stopped();

    void bitcoinInitializeRequested(RpcBankServerClientsHelper*);
    void doneUsingRpcBankServerClientsHelperDuringInitialization();

    void simulatePendingBalanceDetectedBroadcastRequested();
    void simulateConfirmedBalanceDetectedBroadcastRequested();
public slots:
    void initialize(RpcBankServerClientsHelper *rpcBankServerClientsHelper);
    void start();
    void stop();

    void handleBitcoinInstantiated();
    void handleBitcoinInitialized();

    //debug
    //void simulatePendingBalanceDetectedBroadcast();
    //void simulateConfirmedBalanceDetectedBroadcast();
};

#endif // RPCBANKSERVER_H
