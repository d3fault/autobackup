%RPC_AUTO_GENERATED_FILE_WARNING%
#include <Wt/WServer>
#include "%API_CALL_TO_REQUEST_BASE_NAME_TO_LOWERCASE%fromwt.h"

#include <boost/bind.hpp>

%API_CALL_TO_REQUEST_BASE_NAME%FromWt::%API_CALL_TO_REQUEST_BASE_NAME%FromWt(I%API_NAME% *%API_AS_VARIABLE_NAME%, %API_NAME%Session %API_AS_VARIABLE_NAME%Session, const std::string &wtSessionId, boost::function<void (bool internalError, bool %API_CALL_SLOT_NAME%Success%COMMASPACE_IF_RESPONSE_HAS_ANY_ARGS%%API_CALL_RESPONSE_ARGS_AS_COMMA_SEPARATED_LIST_EXLCUDING_REQUEST_POINTER_AND_VARNAMES%)> wApplicationCallback%API_CALL_ARG_TYPES_AND_NAMES_WITH_LEADING_COMMASPACE_IF_ANY_ARGS%)
    : I%API_CALL_TO_REQUEST_BASE_NAME%(%API_AS_VARIABLE_NAME%, %API_AS_VARIABLE_NAME%Session%API_CALL_ARG_NAMES_WITH_LEADING_COMMASPACE_IF_ANY_ARGS%)
    , m_WtSessionId(wtSessionId)
    , m_WApplicationCallback(wApplicationCallback)
{ }
void %API_CALL_TO_REQUEST_BASE_NAME%FromWt::respond(bool internalError, bool %API_CALL_SLOT_NAME%Success%COMMASPACE_IF_RESPONSE_HAS_ANY_ARGS%%API_CALL_RESPONSE_ARGS_AS_COMMA_SEPARATED_LIST_EXCLUDING_REQUEST_POINTER%)
{
    Wt::WServer::instance()->post(m_WtSessionId, boost::bind(m_WApplicationCallback, internalError, %API_CALL_SLOT_NAME%Success%COMMASPACE_IF_RESPONSE_HAS_ANY_ARGS%%API_CALL_RESPONSE_ARGS_AS_COMMA_SEPARATED_LIST_EXLCUDING_REQUEST_POINTER_AND_TYPENAMES%));
}
