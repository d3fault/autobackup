#ifndef SOCIALNETWORKTIMELINE_H
#define SOCIALNETWORKTIMELINE_H

#include <QObject>

#include <QScopedPointer>

namespace SocialNetworkTimelineRequestResponseContracts
{
    class Contracts;
}

class SocialNetworkTimeline : public QObject
{
    Q_OBJECT
public:
    template<class T>
    static void establishConnectionsToAndFromBackendAndUi(SocialNetworkTimeline *backend, T *ui)
    {
        connect(ui, &T::initializeSocialNetworkTimelineRequested, backend, &SocialNetworkTimeline::initializeSocialNetworkTimeline);
        connect(ui, &T::appendJsonObjectToSocialNetworkTimelineRequested, backend, &SocialNetworkTimeline::appendJsonObjectToSocialNetworkTimeline);
        connect(backend, &SocialNetworkTimeline::e, ui, &T::handleE);
        connect(backend, &SocialNetworkTimeline::o, ui, &T::handleO);
        connect(backend, &SocialNetworkTimeline::initializeSocialNetworkTimelineFinished, ui, &T::handleInitializeSocialNetworkTimelineFinished);
        connect(backend, &SocialNetworkTimeline::appendJsonObjectToSocialNetworkTimelineFinished, ui, &T::handleAppendJsonObjectToSocialNetworkTimelineFinished);
    }

    explicit SocialNetworkTimeline(QObject *parent = 0);
    ~SocialNetworkTimeline();
private:
    QScopedPointer<SocialNetworkTimelineRequestResponseContracts::Contracts> m_Contracts;
signals:
    void e(QString);
    void o(QString);
    void initializeSocialNetworkTimelineFinished(bool success);
    void appendJsonObjectToSocialNetworkTimelineFinished(bool success);
public slots:
    void initializeSocialNetworkTimeline();
    void appendJsonObjectToSocialNetworkTimeline(const QJsonObject &data);


    //StupidKeyValueContentTracker Comm:  <-- TODOmb: it may be possible to stuff this functionality into a StupidKeyValueContentTrackerComm object (whose stub can be autogenerated by UserInterfaceSkeletonGenerator if I add the code to do it). but just because it's possible doesn't mean it should be done. since I'm unsure, I'll leave it as a TODOmb
signals:
    void initializeRequested();
    void addRequested(const QString &key, const QString & data);
    void modifyRequested(const QString &key, const QString & newValue);
    void removeKeyRequested(const QString &key);
    void commitRequested(const QString & commitMessage);
    void readKeyRequested(const QString &key, const QString & revision);
public slots:
    void handleE(QString msg);
    void handleO(QString msg);
    void handleInitializeFinished(bool success);
    void handleAddFinished(bool success);
    void handleModifyFinished(bool success);
    void handleRemoveKeyFinished(bool success);
    void handleCommitFinished(bool success);
    void handleReadKeyFinished(bool success, QString key, QString revision, QString data);
};

#endif // SOCIALNETWORKTIMELINE_H
