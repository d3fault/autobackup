SocialNetworkTimeline 'plugins' could (SHOULD?) be standalone apps. They, when running standalone, could probe to see if a SocialNetworkTimeline instance is running and comm with it via QLocalServer, or if none is running they could display in-app a that-app/plugin-specific view of the timeline, ie like statically link to SocialNetworkTimeline widget or whatever~ something along those lines (probably still using dynamic linking, but saying static linking helps explain it better). Or, if no SocialNetworkTimeline instance is running, it could JIT-start one (detached ofc (unless we also want to bring SocialNetworkTimeline 'down' when we exit?)). I'm not sure whether or not I want SocialNetworkTimeline to be a service or not. It certainly is the way to go if you want to synchronize many apps (plugins running standalone *cough*), but when there's nothing going on then it's a waste of efficiency: ie other apps (not SNT related) would have less resources available to them with a service running. JIT 'services' (appearing 'up' 24/7, but not being actually 'up' 24/7) are possible, ofc. Maybe that's the best design. HOWEVER I'm not sure I want to actually let plugins be standalone apps [YET!].

And then there's a part of me that wants to make SNT a "Desktop Environment" (like Xfce or LXDE) and in that case the "plugins" would kinda sorta already fukken "be" (because they would APPEAR to be) "apps". If coded right, the difference between a plugin and an app is nil. Maybe I can use a code generator to help me "always code so that my code functions both as a plugin and as a standalone app" -- oh right it's called always pushing business logic into a class and having the UI (Cli/Widget/QML/Web/Etc) be into a different class. Yea that code gen idea SUCKS _unless_ the code generator was specific to a plugin-interface (so SNT would need it's own specific code generator). Maybe you can abstract it away from specific plugin interfaces, but that hurts my brain too much to think about [atm].