Admittedly, using "RETURN_ONE_IF_SOMETHINGX_FAILS" macros in the body of main is a debugging nightmare. It would be possible to write an app that parses a source file and converts such macros (and calls to such macros) to static/free functions returning bools instead of zero/one. The invocations of those macros also must change (which is really the main benefit from using such macros to begin with imo) to. A macro invoked: "RETURN_ONE_IF_SOMETHING_X_FAILS" has to become "if(!somethingX()) return 1;". All these transformations could be automated, but actually now that I write out the idea... it's shit. Still (OT), I argue that macros returning one like that are safer because you can't forget to check the return value of the function... since the scope/context hasn't changed. Also doesn't require arguments (though this is arguably a con (erroneously:"wtf nothing touches the variable from this line to that, and yet it becomes invalid/etc")