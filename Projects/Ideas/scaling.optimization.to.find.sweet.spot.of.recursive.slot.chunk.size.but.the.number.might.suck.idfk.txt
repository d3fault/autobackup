1/10th of the "average latency for a message" (TODOreq: does this scale to the "message size" so as to be mathematically correct?) would be a good "target size" for the auto-scaling "QMetaObject::invokeMethod(this, "thisSlotLoopAgainAndAgain", Qt::QueuedConnection)" chunk-size. Meaning the size of the chunk that we synchronously crunch in thisSlotLoopAgainAndAgain should be chosen to be roughly around 1/10th of the average latency for a given connection (assuming one connection. multiple would have to take some other approach to this because there would probably then be a many-to-one relationship and [...]). This being an attempt at ANY "sufficient" auto-scaling and always still asynchronous-enough. I would be willing to bet that as long as the average latency speed was like a few milliseconds at least (ie. NOT localhost lol) that the cpu would consider your chosen chunk size to be more than adequate. I can't explain how atm, but I think it scales in a special way that maybe lets it work with computers in the future? Well I think latency is just going to go down and distribution is just going to go up so that problem is more or less already solved, or is being solved. Maybe not though and it can be solved better here/now?

Random thought: It would be easy for a distributed cluster to send me a message saying "Time to buy another server", I feel. I am that confident in my programming. It could even say "you have roughly 24 hours to do that before systems will fail". Why is system administration so difficult for (had: hard to) some people? I guess most can't(couldn't until recently)/don't take the custom-and-cross-platform approach :-D.