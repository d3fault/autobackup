there could even be a simple/thin "request accepted" layer, to catch fails.
you notify two neighbors and await their response (but you don't await their response before you start writing the request. you await their response before you return the response to the client though. basically if your 2 neighbors haven't responded in a relatively short period (which causes a hold up for you) you continue on with returning the response but then investigate your non-responding neighbor. a lot of the times it will just be packet/connection loss, but it is self recovering and very failover proof, even though it's at the cost of bandwidth)
it's still a pretty strong guarantee to get a response
the request acceptor dies and so doesn't get a response (either from the request acceptor. err both? err no the client only needs it's 1 response, but the request acceptor also needs to be notified of the result. should the result pass through him or should he just be told that the result has been delivered? i'd say the latter. they keep a cache that lasts longer than however long it would take for a 'still there wtf?' message to arrive. it could hypothetically expand/contract with the cluster