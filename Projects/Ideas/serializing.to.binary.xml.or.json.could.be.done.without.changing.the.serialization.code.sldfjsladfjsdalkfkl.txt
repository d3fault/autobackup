I'm pondering a way to [de-]serialize data as either binary (QDataStream), xml, or json... but without having to change the [de-]serialization code one bit. Like an enum for the serializer class and a radio box at runtime and the user selects which type they want. OT a bit: The deserializer could even auto-detect which of the 3 formats was used, but doing so without any false positives might be tricky. A plaintext "magic" byte would solve that ofc, just a tad bit of waste.

Anyways onto the implementation: The main problem is that binary [de-]serialization does not include a "key" of any kind. The variable name in the code is the "key", but you only associate it with the value in that you stream out in the same order you stream in. Both XML and JSON use "key"/"value" stuff.

A way to solve this (without streaming out a key when binary format is selected ofc, as doing so would be stupid as fuck) is to use a precompiler/macro-function for the sreaming out of a variable. IIRC, surrounding the macro-function arg with "##" prints the name of the variable literally, so that could be used whenever in xml/json mode as the "key", and not used at all when in binary mode.

Context for this idea: In DesignEqualsImplementation2 I want binary because it's efficient/easy/etc, but at the same time the diffs in git between two binary designs would look shit. I guess in THAT case the best solution would be a custom/specific revision history thingo (both storing revisions and visualizing them). Hell even git might allow me to write a custom "differ" for those, but I'm unsure.