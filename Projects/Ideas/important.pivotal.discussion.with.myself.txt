identifying the problem

rpc generator

i'm thinking about an optimized method of message re-use


the answer is simple
broadcasts (pending,confirmed,payout(?),etc) use same method that network message receiving stack does

the static giveMeAMessage(); //which either new's one or returns a recycled one (after resetting it's defaults) is called for a broadcast and when receiving a request


the end point is always at the network sending stack
it does not matter if it is a broadcast or a response


broadcasts' AbcAppDb are known by the sub-bank-account that the key/account we were monitoring is associated with



oh btw the question is: how to do message recycling for both request/responses (who to send to is implicit, the requestor) and broadcasts (there is no requestor)


you have the answer right there

and requests are implicit


so i guess some handlePendingDetected code in the Bank itself would have to construct the message?

but isn't the Protocol abstracted from business logic?

Bank just emits (after detecting) pendingAmountReceived() to the rpc generated rpc server network code. it knows about that signal because it implements an IBankServer that is also generated by our Rpc Generator

man this is fucking awesome

i am going to launch.



i should do Launch (me) + Launch (abc) on the same exact day~


CAN'T BECAUSE OF MONEY ISSUES (living at home, can't launch me)

fml

becaues of this, i will do Abc under gpl initially

or maybe i should do it privately?


privately = gets most business as clients of Abc (maybe?)
gpl = gets most business in commercial licenses of Abc (for spinoffs)
lgpl = gets most business in AD REVENUE USING techniques... not directly from ABC. spinoffs become retarded but the software is used as foundation for many future products


HMMM that's a tough decision tbh


ULTIMATELY i want to be lgpl(or bsd if qt forks idgaf)
definitely
after i CAN survive on ad revenue using techniques






#############################
IT DOES NOT MATTER THAT THE SOFTWARE IS HACKABLE.
AS LONG AS I DISPATCH FUNDS TO AN OFFLINE STORED WALLET, THE APP NEED ONLY FUNCTION AND WILL MAKE MONEYS. HACKS WILL ONLY BE ABLE TO STEAL FOR AS LONG AS THEY ARE UNDETECTED




so as long as i do ::giveMeAMessage(); in a handlePendingAmountReceived slot in the rpc generated rpc server code that Bank signals, my network portion of that can be the one to call ::recycleMessage(); after it writes it (both responses and broadcasts) to the network


ok this recycling is going to be easy as fuck.

and i don't think i even have to "generate" it
i think it should(could! will!) be object independent
scw
to trigger the 'thinking about it and have JUST decided yes' thought following
scw
which
as only i would recognize (initially)
is also my initials lawl
should could will
steven curtis wieler
perfect fit

that should be your slogan
fuck d3fault


or it can be a tor alias since you JUST now came up with it...
scw
like criminals that 'want to be caught' etc

but i will never go by scw
just ShouldCouldWill

some crazy tor shit

example: BlueBox
i still plan on doing it
fuck it

for fun
for lulz
for MOVIES and TV SHOWS


problem: how to use BlueBox to detect crashes/downs when i can't use it because i am streaming live 24/7
a 'hidden tor' mode
not to be confused with offline mode(??????????)
but hopefully they share security features?
methods
or something
idfk
i still want to record the hidden tor mode shit is my point

SO
i should control it all from offline mode?

write scripts and generate binaries that are air gapped transferred to tor shits. the OS's are the same.


so this is like 3 fucking computers/modes at once

YES
CanShouldWill
i can do 3 computers at once
i should do 3 computers at once
so i will do 3 computers at once


ShouldCanWill*

w/e

shouldn't it logically be CanShouldWill?
in the context of my first usage, no
but in most other contexts (cosmic context), it is can before should
you have to be able to can before you are able to should (and ultimately will)


SOME might misinterpret ShouldCanWill as: i should get rid of will. can it.
but they'd be pretty damn dumb (dumb exist)
CanShouldWill avoids that confusion while still retaining the same overall message


any people that get pissed at me doing offline/tor shit while still recording myself + the online (idle) desktop (note: CC-BY notices for music still show on online view (should i be listening while coding etc on offline box or admin'ing on tor box (should i watch movies on the tor box too if i have the bandwidth? how would music(online)/movie(offline) sound conflict?)). it might be perhaps a text box below the video itself. clickable etc would be cool as fuck too)
i say that i have a right to privacy

even though i think privacy is impossible
i will attempt to get it


BUT THEN I AM STILL PARANOID
FML

how2what?
launch BlueBox then step back
and gain back no paranoia


or is some paranoia with only explicitly hidden things (BlueBox, etc)
worth the cost?

i can still gain TONS of paranoia relief with my DREAM project, composed entirely of free content (software, media). libre content. maybe librecontent.com ?
i would lose my trust in myself saying "i have nothing to hide", nah mean?
it wouldn't be true any longer :(
fuck.

or should i just say fuck bluebox?
it was a business venture anyways
so i'd be greedy to pursue it after abc is viable

and fuck paranoia
and hell yes to being able to believe it when you say: "i have nothing to hide"
you will sleep so fucking sound

and you want to sleep sound
that's called comfort
you want to live in comfort
it is really the only thing attainable

fuck BlueBox
fuck alias CanShouldWill
i am d3fault
i am perfect (well..)