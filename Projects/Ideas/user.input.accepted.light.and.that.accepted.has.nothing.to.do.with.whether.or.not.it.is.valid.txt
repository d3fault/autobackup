The GUI thread, when accepting user input, should make a small change before (or after it doesn't matter much) the dispatch of the user input to the business thread (where relevant). The small change should simply tell the user "we received your user input". It could disable the GUI itself, but this is not entirely necessary. A simple boolean dot that lights up somewhere on screen (always in the same spot) could be used. It does introduce complicatons of multi-tasking like if the user was not able to do another GUI action until the business returns with it's results... should the operation be long-standing... but FOR THE MOST PART humans only do one task at a time. Decompressing a large file and... starting to play some music... is an example of human multi-tasking... but really the business thread could un-light up that dot just when the decompressing BEGINS. Though the light needs a minimum amount of time so it can be registered in the human brain, it also shouldn't be long enough that it slows down even the fastest of users. I'm getting way OT here but there's a lot of implications. My point is that it is generally the opposite of good design. Usually you wait for the business response before updating the GUI. And that is even still true.. it just has a tiny modification to it "notify user that user input was accepted... asap". That tiny bit of functionality can/should live on the GUI thread, since it's so small.

The business thread's return/response is what de-activates the light... So long standing operations would need a "started()" signal just for that (is that cost worth it?).