<interface name="BitcoinServerBank" version="1">
  <action name="CreateBankAccount" [hasResponse="true"] broadcastResponse="false"> <!-- setting hasResponse to false means a signal won't be generated for the interface to send the response back to the rpc client -->
    <parameter type="const QString &" name="Username">
  </action>
  <broadcast name="PendingBalanceDetected">
    <parameter type="const QString &" name="Username" />
    <parameter type="double" name="Amount" />
  </broadcast>
  <broadcast name="AutoPayoutPerformed"> <!-- TODO: haven't thought of how to handle this yet. how does it conflict with race conditions for payout requests? should there be no auto payout on a day a manual payout takes place, for example? to rid ourselves of that potential race condition. but what if the payout request comes just after the autopayout is broadcast... AND the balance amount is fine... the user doesn't necessarily want both payouts to succeed -->
    <parameter name="const QString &" name="Username" />
    <parameter name="double" name="Amount" />
</interface>


...results in...

bitcoinbankserverhelper.cpp
which has slot:
createBankAccount(const QString &username);
and signals:
bankAccountCreated(const QString &username);
//psbly even bankAccountCreationFailed
pendingBalanceDetected(double amount);

...and...

IBitcoinBankServer (of which bitcoinbankserverhelper.cpp already implements), which Bank.cpp implements
implementing this interface forces us to implement it's slots, which are pure virtual functions
and gives us access to it's signals (for broadcasts and responses)... which are technically optional to implement (the compiler won't force us to use them)... but should definitely be implemented/used


i could seriously make money off a Qt/SSL/RPC package if it was coded nicely
or open source it like my heart tells me to

fuck protobuf... although i guess the object creation is  handy... it isn't necessarily needed
exposing only the variables used is kinda i think better? but idfk it is has other negative effects

i think i could do some nify magic in the >> and << QDataStream operators after parsing the above xml

only parameters used by action/broadcast are sent on the network... and the receiving end (also generated code) knows not to expect it

could also re-use parameter names which really only just saves us lines of code in teh end so is kinda pointless
and the types would have to match exactly like my 2 username parameter's above
...which makes me want to have a #define usernameType "const QString &" above... more parsing fuck that

idfk

is this tangent worth it?

it seems like it'd help me in the future just when codin n shit

on input "CreateBankAccount"
slot generated: createBankAccount
and signal: createBankAccountFinished
and signsl: createBankAccountFinishedError



this seems to imply the following code (in main or somewhere):

Bank bank;
RpcServerImpl impl(bank); //where impl accepts IBitcoinBankServer

impl then sets up the object that communicates with Bank on it's own thread, and puts Bank on it's on thread as well (how i currently do in BankServer.cpp)
...and connects signals/slots (generated code remember!) to the two

it also inits bank, which signals an init to our clientshelper.cpp which starts teh server listening


i do like this tangent but how long will it take?? will i survive the journy? will it only be a few hours now and hundreds of hours saved in the future?


i guess really if i wanted to deck it out i could make the code generator also ask me how many clients and then generate all the ssl ca certs / keys (and identify which is which by putting them in directories for me) and fill out all the code needed to make it work for me) for both the clients and the server