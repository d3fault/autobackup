ODR!

ONE DEFINITION RULE

I hate having to code 1x CLI ui and 1x WIDGETS ui. that's 2 fucking UIs!

Qt doesn't seem to give a shit about CLI, but I do.
Qt's QML is a disaster, but I am pretty sure I can/should still target it as an OUTPUT of this app. Qt's Widgets are outdated as fuck (but still better in some ways than QML imo).

ODR! QML could have be that "one definition", but it's inherent use of JavaScript is a show stopper for me. I don't feel like my UIs are ever very complex... just tedious to write.
Almost always a fuckin grid of widgets. a layout of layouts. horizontal vertical -> done. the end. simple as fuck. I can define that using json easily, I don't want to get way the fuck ahead of myself and bundle in some monolithic javascript interpreter, I just want a simple grid-like widget definition... which I then translate to CLI, Widget, QML, HTML (probably custom) etc. ncurses comes to mind.

there is a drawing on my whiteboard that sums up the EXACT train of thought perfectly, but basically the end result will look like this:

format2ui --qtwidgets /path/to/format.json /some/output/dir
then blamo format.json is converted 2 the ui of type qtwidgets, and those files go in /some/output/dir

the naming of this probably sucks, but whatever fuck it for now

oh and I want to have 2x CLI "modes" that are compatible with one another TODOreq
cli [arg0] [arg1]
cli --interactive #queries for arg0 and arg1
cli --interactive [arg1] #queries for arg0 only
cli --interactive [arg0] #queries for arg1 only
etc


A _STATIC_ html ui (like Wt does) would be better than a fancy schmancy html/js one (like Wt does). js is shyte, so I should implement a ui generator that uses plain ole html _FIRST AND FOREMOST_, then maybe an ajax enhanced version of it later. I like Wt's strategy here (progressive enhancement, graceful fallback), but after using Wt for quite a while it was too buggy or a pain in the ass to use. it was also GPL so there's that :-/. I know I can code a replacement for it using Qt (instead of Boost, which is what Wt uses)... but that's a pretty big task lol (but ima do it incrementally (one UIVariableType at a time), so it's alllllll guuuud man!)
