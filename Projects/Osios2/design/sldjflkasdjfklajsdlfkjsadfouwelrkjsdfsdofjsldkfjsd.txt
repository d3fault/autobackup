I had forgotten that I plan to synthesize events (even if using Qt's public APIs to do so (would be nice if I didn't have to)) on each of the three screens and to still cut their visual outputs into thirds and transmit them across the network for DISPLAY (my old plan was to cryptographically verify those bitmaps against each other, but getting them to match (in a vector sort of manner) meant redoing the underlying widgets I think. Still, I will NOTICE a faulty node in a reasonable amount of time, because each of the three screens is composed of thirds of the three screens. VISUALLY. So it is an optimization for me to draw 2/3 of the screen over 3/3 of the screen. It is a security feature that I put a black-out panel (additional software, tested periodically!!!) in between the (2/3)'s layer and the (3/3)'s layer; the worry being that if the (2/3)'s layers all fail simultaneously (possible, which is why black-out-panel needs to not be the same process as us), such as in a software bug (parsing a certain timeline node stream for example) that all 3 of them encounter together xD. But yea my point is, the 2/3 could fail and the failure could go unnoticed without the black-out-panel. The visual contents are also pretty expensive to serialize (you could serialize just the crypto hash of it, but good luck making a replay system out of that xD (so i guess you should NOT in that hypothetical situation, serialize it))

One mouse, one keyboard, access to all three screens. A lock-on-this-screen functionality would be nice. Being able to break out of that lock with REALLY FAST mouse movement makes a nice optional/additional feature to the lock-on-this-screen software. Synergy has this additional "bug" (feature (unless you're playing vidya and wait no scroll lock solves that it's when it's OFF that it's sometimes annoying and jumps to another screen. I think it highly depends no your mouse sensitivity, and I have mine on high)!). I guess what I'm saying is that unlike synergy, wait no synergy works damn I'm dumb just use synergy idiot. Works as additional layer of "network verification" ;-P. Is extremely cheap too (free).

My seeing that the screens show (had:match) (and I could probably use more verification like a qr code (but maybe easier to read)) is proof of the timeline node streams not being just cryptographically verified garbage. Yes it is cryptographically authenticated, but it is also "used", one might even say executed. This is why I WANT TO (but can't for the life of me get it working) use the already existing events system in Qt!