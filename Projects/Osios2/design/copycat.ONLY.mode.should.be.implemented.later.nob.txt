While presenting the remote rendering locally surely does add that second layer of security, I've been letting my subconscious process the project over the past few days and have realized that a simple sha1 of the rendering (png or bmp, depending on the deployment target (ram vs. cpu)) will suffice. It does mean the themes and pixels must match precisely (I was going to be ok with theme mismatch and the occassional pixel, but now I can't), but that's pretty easy anyways. I will not be persisting the sha1 of the rendering, so the timeline nodes themselves are still the core of the data (and cross platform/theme-independent/etc). While copycat-only mode is desired, I should prioritize the core goal of the application: shared-nothing data-security-focused operating system independent operating system. The silly/simple logic surrounding enabling/disabling/etc the copycat-only mode is adding an unneeded layer of complication. I can/should/will just hack in "copycat-only" mode later. And while on the subject, my current copycat implementation is garbage anyways, since the copycatter is still taking part in the [timeline-node-only(for now, pending change momentarily)] cryptographic verification process, whereas a true copycat-only node does/would not take part in that.

Cryptographic hashes of the timeline nodes ONLY being the checkpoint for "cryptographic verification", as it is right now, is also desired. CLI will probably have to use that only, but actually I'm not sure. Either way, I am hesitant to say that every timeline node must be able to be rendered. A compile time switch to add on the "cryptographic hash the rendering of each timeline node as well" would be perfect, but I'm coding for way too many "also desired" features simultaneously, which is just confusing me :-P. I'm going to first add the cryptographic hash of rendering to the cryptographic-hash-of-timeline-nodes responses (both of which will mean "cryptographically verified"), and then afterwards I'll see about that compile time switch to make rendering optional.