#include "workinginputtest.h"

WorkingInputTest::WorkingInputTest(int simpleIntArg1, QString implicitlySharedStringArg2, QObject *parent) :
    QObject(parent)
{
    //if the IDE were smart as fuck, he'd bitch about this. But since it would normally only notice it during actual compilation (and since the class we are new'ing is generated by then), we're ok :)
    m_WorkingInputTestBusiness = new WorkingInputTestBusinessOnThreadHelper();

    connect(m_WorkingInputTestBusiness, SIGNAL(objectOnThreadWorkingInputTestBusinessInstantiated(WorkingInputTestBusiness*)), this, SLOT(handleWorkingInputTestBusinessInstantiated(WorkingInputTestBusiness*)));

    m_EndResultTargetBusiness.start(simpleIntArg1, implicitlySharedStringArg2, QThread::InheritPriority);
    //TODOreq: the QObject *parent that is passed into the object that is ultimately run on the backend thread needs to always be zero. The object itself needs to be able to function with it having a set parent (for normal, non-thread usage), but whenever it's on it's own thread it does not have a parent. Taking that into account in the hack will be annoying and/or difficult and/or hacky-as-fuck and may possibly break (how do I know which one is the parent? Look for the word "parent"? The last parameter in the argument list and ensure it's a QObject? There is no safe and surefire way!
}
WorkingInputTest::~WorkingInputTest()
{
    delete m_WorkingInputTestBusiness;
}
void WorkingInputTest::handleWorkingInputTestBusinessInstantiated(WorkingInputTestBusiness *workingInputTestBusiness)
{
    //dag, yo
    Q_UNUSED(workingInputTestBusiness) //this is where connections would normally be done
}
