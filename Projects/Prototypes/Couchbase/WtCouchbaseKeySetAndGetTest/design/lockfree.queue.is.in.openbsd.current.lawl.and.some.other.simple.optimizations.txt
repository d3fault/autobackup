mfw OpenBSD has boost 1.53, which has LockFree::Queue. BUT then I realized using a single lockfree::queue isn't horizontally scalable anyways so my new variable amount of message queues (protected by mutexes) is actually a pretty cool guy eh. i can easily swap out the mutex+message_queue for lockfree::queue. I just won't be using "try try try lock" anymore: we'd use the "random()" we got first. A change in design which applies to both methinks. Only generate random number on WApplication instantiation, then increment it (looping around to zero) on each use instead of getting a new one. Would be sufficiently random. We only want to randomize between WApplication instances, and yea it'd save time I guess, instead of generating a random number for every get/store. Another (lol OT now) optimization is probably to have way more than necessary queues (both kinds as per above (applies to both designs)), so they never compete with one another. 10 Wt threads, 100 "queues" = low chance of competition... and meh 100 queues costs very little. If I have queueCount == wt pool threads, then ALMOST ALWAYS will the try_locks fail and it use the very last blocking lock.